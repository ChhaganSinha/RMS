@using GridShared
@using GridShared.Columns
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Client.Client
@inject AppClient client
@implements ICustomGridComponent<RoomCleaning>
@inject NavigationManager NavigationManager

<button class='btn btn-sm btn-warning' style="border-radius:15px" @onclick="MyClickHandler" title="Edit"><i class="fa fa-pencil-square-o"></i></button>
<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {


        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Room Number</label>
                    <InputNumber @bind-Value="@model.RoomNo" id="roomNo" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.RoomNo" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Assign To</label>
                    <HxSelect TItem="Employee"
                              TValue="int?"
                              Data="Employees"
                              @bind-Value="empid"
                              TextSelector="@(employee => FormatEmployeeText(employee))"
                              ValueSelector="@(employee => employee.Id)"
                              Nullable="true"
                              NullText="- Select -"
                              NullDataText="Loading Employees..." />

                    <ValidationMessage For="() => model.AssignTo" />
                    
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Start Date</label>
                    <InputDate @bind-Value="@model.DateStart" id="dateStart" class="form-control"></InputDate>
                    <ValidationMessage For="() => model.DateStart" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">End Date</label>
                    <InputDate @bind-Value="@model.DateEnd" id="dateEnd" class="form-control"></InputDate>
                    <ValidationMessage For="() => model.DateEnd" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-12">
                    <label class="col-form-label bold-font required-field">Status</label>
                    <select @bind="model.Status" class="form-control">
                        <option>Ready</option>
                        <option>Booked</option>
                        <option>Assigned to Clean</option>
                        <option>Booked and Assigned to Clean</option>
                        <option>Under Maintenance</option>
                        <option>Dirty</option>
                        <option>Blocked</option>
                        <option>Do not Reserve</option>
                        <option>Under Process</option>
                    </select>
                    <ValidationMessage For="() => model.Status" />
                </div>
            </div>

       @*      <div class="form-group row">
                <div class="col-md-12">
                    <label class="col-form-label bold-font required-field">CheckList</label>
                    <div>
                        <input type="checkbox" id="clean" value="Clean" @onchange="OnCheckBoxChange" checked="@model.CheckList.Contains("Clean")" />
                        <label for="clean">Clean</label>
                    </div>
                    <div>
                        <input type="checkbox" id="floorCleaning" value="Floor Cleaning" @onchange="OnCheckBoxChange" checked="@model.CheckList.Contains("Floor Cleaning")" />
                        <label for="floorCleaning">Floor Cleaning</label>
                    </div>
                    <ValidationMessage For="() => model.CheckList" />
                </div>
            </div> *@

            @if (process || model == null)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</PageDialog>
@code {
    [Parameter]
    public RoomCleaning Item { get; set; }
    private int? empid;
    [Parameter]
    public CGrid<RoomCleaning> Grid { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private Timer _timer;
    private int _delay = 2500;
    bool show = false;
    bool process = false;
    string Title = "Update RoomCleaning";

    RoomCleaning model = new();

    private List<Employee> Employees = new();

    private async Task MyClickHandler(MouseEventArgs e)
    {

        show = true;
        model = await client.GetRoomCleaningById(Item.Id);
        if (model.EmployeeId > 0)
        {
            empid = model.EmployeeId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        Employees = (await client.GetAllEmployee()).ToList();
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();
        model.EmployeeId = empid;
        model.EmpId = Employees.Where(x => x.Id == empid)
                       .Select(x => x.EmpId)
                       .FirstOrDefault();
        model.Name = Employees.Where(x => x.Id == empid)
        .Select(x => x.Name)
        .FirstOrDefault();
        var response = await client.UpsertRoomCleaningAsync(model);
        if (response.IsSuccess)
        {
            // model = response.Result;
            alert?.SetSuccess(response.Message);
            await RoomCleaningGrid.RefreshGridAsync();
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }
    private string FormatEmployeeText(Employee employee)
    {
        return $"{employee.Name} ({employee.EmpId})";
    }
    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    // private void OnCheckBoxChange(ChangeEventArgs e)
    // {
    //     var value = e.Value.ToString();
    //     var items = model.CheckListItems;
    //     if (items.Contains(value))
    //     {
    //         items.Remove(value);
    //     }
    //     else
    //     {
    //         items.Add(value);
    //     }
    //     model.CheckListItems = items;
    //     model.CheckList = string.Join(",", items);
    // }

}