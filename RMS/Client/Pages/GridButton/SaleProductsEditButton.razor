@using GridShared
@using GridShared.Columns
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Client.Client
@inject AppClient client
@implements ICustomGridComponent<SaleProducts>
@inject NavigationManager NavigationManager

<button class='btn btn-sm btn-warning' style="border-radius:15px" @onclick="MyClickHandler" title="Edit"><i class="fa fa-pencil-square-o"></i></button>
<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {


        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Product Name</label>
                    <InputText @bind-Value="@model.ProductName" id="name" class="form-control"></InputText>
                    <ValidationMessage For="() => model.ProductName" />
                </div>

                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Price</label>
                    <InputNumber @bind-Value="@model.Price" id="available" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Price" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Select Product Category</label>
                    <select @bind="model.ProductCategory" class="form-control" id="Category">
                        <option selected>- Select -</option>
                        @foreach (var val in ProductCategories)
                        {
                            <option value="@val.Id">@val.Name</option>
                        }
                    </select>
                    <ValidationMessage For="() => model.ProductCategory" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Quantity</label>
                    <InputNumber @bind-Value="@model.Quantity" id="available" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Quantity" />
                </div>








            </div>



            <div class="form-group row">
                <div class="col-md-12">
                    <label class="col-form-label bold-font required-field">Comments</label>
                    <InputTextArea @bind-Value="@model.Comments" id="name" class="form-control"></InputTextArea>
                    <ValidationMessage For="() => model.Comments" />
                </div>

            </div>



            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr style="margin-bottom: 2px;" />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</PageDialog>

@code {
    [Parameter]
    public SaleProducts Item { get; set; }

    [Parameter]
    public CGrid<SaleProducts> Grid { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private List<ProductCategories> ProductCategories = new();

    private Timer _timer;
    private int _delay = 2500;
    bool show = false;
    bool process = false;
    string Title = "Update SaleProducts Details";

    SaleProducts model = new();

    private async Task MyClickHandler(MouseEventArgs e)
    {
        show = true;
        model = await client.GetSaleProductsById(Item.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        ProductCategories = (await client.GetAllProductCategory()).ToList();
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();

        var response = await client.UpsertSaleProductsAsync(model);
        if (response.IsSuccess)
        {
            // model = response.Result;
            await SaleProductsGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }
}
