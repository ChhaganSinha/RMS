@using GridShared
@using GridShared.Columns
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Client.Client
@inject AppClient client
@implements ICustomGridComponent<ReservationDetailsDto>
@inject NavigationManager NavigationManager

<button class='btn btn-sm btn-primary' style="border-radius:15px" @onclick="MyClickHandler" title="Check In"><i class="fa fa-check-square-o"></i></button>
<SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {


        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
              
            </div>

            @if (process || model == null)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</SimpleDailog>
@code {
    [Parameter]
    public ReservationDetailsDto Item { get; set; }

    [Parameter]
    public CGrid<ReservationDetailsDto> Grid { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private Timer _timer;
    private int _delay = 2500;
    bool show = false;
    bool process = false;
    string Title = "Update Category";

    ReservationDetailsDto model = new();

    private async Task MyClickHandler(MouseEventArgs e)
    {
        show = true;
       // model = await client.GetBookingListById(Item.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();

        // var response = await client.UpsertBookingListAsync(model);
        // if (response.IsSuccess)
        // {
        //     // model = response.Result;
        //     alert?.SetSuccess(response.Message);
        //     await BookingListGrid.RefreshGridAsync();
        // }
        // else
        //     alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

}