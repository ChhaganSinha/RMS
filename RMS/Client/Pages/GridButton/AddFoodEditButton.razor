@using GridShared
@using GridShared.Columns
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Client.Client
@using System.ComponentModel.DataAnnotations
@inject AppClient client
@implements ICustomGridComponent<Food>
@inject NavigationManager NavigationManager

<button class='btn btn-sm btn-warning' style="border-radius:15px" @onclick="MyClickHandler" title="Edit"><i class="fa fa-pencil-square-o"></i></button>
<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {
        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <!-- Food Name -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font required-field">Food Name</label>
                    <InputText @bind-Value="@model.FoodName" id="FoodName" class="form-control"></InputText>
                    <ValidationMessage For="() => model.FoodName" />
                </div>

                <!-- Price -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Price</label>
                    <InputNumber @bind-Value="@model.Price" id="Price" class="form-control" step="0.01" format="0.00"></InputNumber>
                    <ValidationMessage For="() => model.Price" />
                </div>

                <!-- Tax Percentage -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Tax %</label>
                    <InputNumber @bind-Value="@model.TaxPercentage" id="TaxPercentage" class="form-control" step="0.01" format="0.00"></InputNumber>
                    <ValidationMessage For="() => model.TaxPercentage" />
                </div>


            </div>

            <div class="form-group row">
                <!-- Select Menu Type -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Select Menu Type</label>
                    <HxMultiSelect TItem="MenuType"
                                   AutoSort="false"
                                   TValue="int"
                                   Data="@menuTypes"
                                   @bind-Value="@selectedMenuTypeid"
                                   TextSelector="@(p => p.Name)"
                                   ValueSelector="@(p => p.Id)"
                                   EmptyText="- Select -"
                                   NullDataText="Loading..." />
                </div>

                <!-- Select Food Category -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Select Food Category</label>
                    <HxSelect TItem="FoodCategory"
                              TValue="int?"
                              Data="Category"
                              @bind-Value="foodcategoryid"
                              TextSelector="@(FoodCategory => FoodCategory.Name)"
                              ValueSelector="@(FoodCategory => FoodCategory.Id)"
                              Nullable="true"
                              NullText="- Select -"
                              NullDataText="Loading categories..." />
                    <ValidationMessage For="() => model.FoodCategory" />
                </div>

                <!-- Select Food Variants -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Select Food Variants</label>
                    <HxSelect TItem="AddVariants"
                              TValue="int?"
                              Data="Variants"
                              @bind-Value="variantsid"
                              TextSelector="@(Variants => Variants.Name)"
                              ValueSelector="@(Variants => Variants.Id)"
                              Nullable="true"
                              NullText="- Select -"
                              NullDataText="Loading variants..." />
                    <ValidationMessage For="() => model.Variant" />
                </div>
            </div>

            <div class="form-group row">
                <!-- Cooking Time -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Cooking Time</label>
                    <InputText @bind-Value="@model.CookingTime" id="CookingTime" class="form-control"></InputText>
                    <ValidationMessage For="() => model.CookingTime" />
                </div>

                <!-- Upload Image -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Upload Image</label>
                    <InputFile OnChange="HandleFileSelected" class="form-control" />
                    <br />
                    @if (!string.IsNullOrEmpty(imageDataUrl))
                    {
                        <img src="@imageDataUrl" style="max-width: 200px; max-height: 200px;" />
                    }
                    <ValidationMessage For="() => model.ImageFile" />
                </div>
            </div>

            <!-- Loading Indicator and Alerts -->
            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }

            <UiAlert Model="alert"></UiAlert>
            <hr style="margin-bottom: 2px;" />
            <button type="submit" class="btn btn-primary float-right col-md-4">Update</button>
        </EditForm>
        <br />
    }
</PageDialog>
@code {
    [Parameter]
    public Food Item { get; set; }

    private int? foodcategoryid;
    private int? variantsid;

    [Parameter]
    public CGrid<Food> Grid { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private Timer _timer;
    private int _delay = 2500;
    bool show = false;
    bool process = false;
    string Title = "Update Food Details";


    [Required]
    private List<int> selectedMenuTypeid { get; set; } = new();
    private bool IsError = false;
    private List<MenuType> menuTypes = new();
    private List<FoodCategory> Category = new();
    private List<AddVariants> Variants = new();
    Dictionary<int, List<int>> FoodMenuTypeMap = new Dictionary<int, List<int>>();

    private string imageDataUrl;

    Food model = new();
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                model.ImageFile = memoryStream.ToArray();
                imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(model.ImageFile)}";
            }
        }
    }

    private async Task MyClickHandler(MouseEventArgs e)
    {
        show = true;
        model = await client.GetFoodById(Item.Id);
        alert?.Clear();

        menuTypes = (await client.GetAllMenuType()).ToList();
        Category = (await client.GetAllFoodCategory()).ToList();
        Variants = (await client.GetAllAddVariants()).ToList();
        // Convert existing image data to base64 string for preview
        if (model.ImageFile != null && model.ImageFile.Length > 0)
        {
            imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(model.ImageFile)}";
        }

        foodcategoryid = model.FoodCategoryId > 0 ? model.FoodCategoryId : null;
        variantsid = model.VariantId > 0 ? model.VariantId : null;
        var foodMenuTypeMap = await client.GetFoodMenuTypeByFoodId(model.Id);
        selectedMenuTypeid.AddRange(foodMenuTypeMap.Select(o => o.MenuTypeId));
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();

        model.FoodCategoryId = foodcategoryid;
        if (foodcategoryid != null)
            model.FoodCategory = Category.Where(x => x.Id == foodcategoryid).Select(x => x.Name).First();

        model.VariantId = variantsid;
        if (variantsid != null)
            model.Variant = Category.Where(x => x.Id == variantsid).Select(x => x.Name).First();

        if (selectedMenuTypeid.Count > 0)
            model.MenuType = string.Join(", ", menuTypes.Where(menuType => selectedMenuTypeid.Contains(menuType.Id)).Select(menuType => menuType.Name));

        var response = await client.UpsertFoodAsync(model);
        if (response.IsSuccess)
        {
            if (response.Result.Id > 0)
            {
                if (FoodMenuTypeMap.ContainsKey(model.Id))
                {
                    FoodMenuTypeMap[model.Id] = selectedMenuTypeid.Select(id => id).ToList();
                }
                else
                {
                    FoodMenuTypeMap.Add(model.Id, selectedMenuTypeid.Select(id => id).ToList());
                }

                var result = await client.UpsertFoodMenuTypeMapping(FoodMenuTypeMap);
            }
            await FoodGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
           
        }
        else
        {
            alert?.SetError(response.Message);
        }

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }
}
