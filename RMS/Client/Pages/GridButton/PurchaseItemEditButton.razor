@using GridShared
@using GridShared.Columns
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Client.Client
@inject AppClient client
@inject IJSRuntime JSRuntime
@implements ICustomGridComponent<PurchaseItem>
@inject NavigationManager NavigationManager

<button class='btn btn-sm btn-warning' style="border-radius:15px" @onclick="MyClickHandler" title="Edit"><i class="fa fa-pencil-square-o"></i></button>
<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {
        <UiAlert Model="alert"></UiAlert>
        <EditForm Model="@purchaseItem" OnValidSubmit="@OnSave">
            <DataAnnotationsValidator />

            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Supplier Name</label>
                    <select @bind="purchaseItem.SupplierNameId" class="form-control" id="SupplierName" disabled="@purchaseItem.IsPaid">
                        <option selected>- Select -</option>
                        @foreach (var val in SupplierList)
                        {
                            <option value="@val.Id">@val.SupplierName</option>
                        }
                    </select>
                    <ValidationMessage For="() => purchaseItem.SupplierName" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Invoice No</label>
                    <InputText @bind-Value="purchaseItem.InvoiceNo" class="form-control" disabled="@purchaseItem.IsPaid" />
                    <ValidationMessage For="() => purchaseItem.InvoiceNo" />
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Purchase Date</label>
                    <InputDate @bind-Value="purchaseItem.PurchaseDate" class="form-control" disabled="@purchaseItem.IsPaid" />
                    <ValidationMessage For="() => purchaseItem.PurchaseDate" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Expiry Date</label>
                    <InputDate @bind-Value="purchaseItem.ExpiryDate" class="form-control" disabled="@purchaseItem.IsPaid" />
                    <ValidationMessage For="() => purchaseItem.ExpiryDate" />
                </div>
            </div>

            <div class="form-group">
                <label class="col-form-label bold-font">Details</label>
                <InputTextArea @bind-Value="purchaseItem.Details" class="form-control" disabled="@purchaseItem.IsPaid" />
            </div>

            <div class="table-responsive mt-3" style="width:">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Item Information</th>
                            <th>Stock/Qnt</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Total</th>
                            @if (!purchaseItem.IsPaid)
                            {
                                <th>Action</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in purchaseItem.Items)
                        {
                            <tr>
                                <td>
                                    <InputText @bind-Value="item.ItemName" class="form-control" placeholder="Item Name" disabled="@purchaseItem.IsPaid" />
                                </td>
                                <td>
                                    <InputNumber @bind-Value="item.Stock" class="form-control" placeholder="Stock/Qnt" @oninput="(e) => { item.UpdateTotal(); CalculateGrandTotal(); }" disabled="@purchaseItem.IsPaid" />
                                </td>
                                <td>
                                    <InputNumber @bind-Value="item.Quantity" class="form-control" placeholder="Quantity" @oninput="(e) => { item.UpdateTotal(); CalculateGrandTotal(); }" disabled="@purchaseItem.IsPaid" />
                                </td>
                                <td>
                                    <InputNumber @bind-Value="item.Rate" class="form-control" placeholder="Rate" @oninput="(e) => { item.UpdateTotal(); CalculateGrandTotal(); }" disabled="@purchaseItem.IsPaid" />
                                </td>
                                <td>
                                    <input type="text" value="@item.Total.ToString("F2")" class="form-control" readonly />
                                </td>

                                @if (!purchaseItem.IsPaid)
                                {
                                    <td class="text-center">
                                        <button type="button" class="btn btn-danger" @onclick="() => RemoveItem(item)">Delete</button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (!purchaseItem.IsPaid)
            {
                <button type="button" class="btn btn-secondary" @onclick="AddNewItem">Add More Item</button>
            }

            <div class="form-group row mt-3">
                <div class="col-md-12 text-right">
                    <h4>Grand Total: @purchaseItem.GrandTotal</h4>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-12 text-right">
                    @if (!purchaseItem.IsPaid)
                    {
                        <button type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-success" @onclick="MarkAsPaid">Mark as Paid</button>
                    }
                </div>
            </div>
        </EditForm>
        <br />
    }
</PageDialog>

@code {
    private List<SupplierList> SupplierList = new();
    private List<ItemDto> item = new();
    [Parameter]
    public PurchaseItem Item { get; set; }

    [Parameter]
    public CGrid<PurchaseItem> Grid { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private Timer _timer;
    private int _delay = 2500;
    bool show = false;
    bool process = false;
    string Title = "Update PurchaseItem Details";

    PurchaseItem purchaseItem = new();

    private async Task MyClickHandler(MouseEventArgs e)
    {
        show = true;
        purchaseItem = await client.GetPurchaseItemById(Item.Id);
        // Ensure Items collection is initialized if null
        if (purchaseItem.Items == null)
        {
            purchaseItem.Items = new List<ItemDto>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        SupplierList = (await client.GetAllSupplierList()).ToList();
    }

    public async Task OnSave()
    {
        // Calculate grand total
        CalculateGrandTotal();

        // Handle form submission logic
        process = true;
        alert?.Clear();

        var response = await client.UpsertPurchaseItemAsync(purchaseItem);
        if (response.IsSuccess)
        {
            await PurchaseItemGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            ResetForm();
        }
        else
        {
            alert?.SetError(response.Message);
        }

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        purchaseItem = new();
        show = false;
        process = false;
    }

    private void AddNewItem()
    {
        purchaseItem.Items.Add(new ItemDto());
        CalculateGrandTotal();
        StateHasChanged();
    }

    private void RemoveItem(ItemDto item)
    {
        purchaseItem.Items.Remove(item);
        CalculateGrandTotal();
    }

    private void CalculateGrandTotal()
    {
        purchaseItem.GrandTotal = Math.Round(purchaseItem.Items.Sum(item => item.Total), 2);

    }

    private async Task MarkAsPaid()
    {

        purchaseItem.IsPaid = true;
        var response = await client.UpsertPurchaseItemAsync(purchaseItem);
        if (response.IsSuccess)
        {
            await PurchaseItemGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            purchaseItem = new PurchaseItem();
        }
        else
        {
            alert?.SetError(response.Message);
        }
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }
}
