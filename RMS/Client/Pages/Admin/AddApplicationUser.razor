@page "/add-application-user"
@using RMS.Dto.Auth
@using RMS.Dto.Enum
@inject IdentityAuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject IAuthorizeApi authorizeApi
@attribute [Authorize(Roles = "SuperAdmin,Admin")]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Add User
                        <a @onclick="() => show = true" style="cursor:pointer">
                            <i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Hall"></i>
                        </a>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Add User</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="row justify-content-md-center">
        <div class="col-sm-6">
            <h4 class="text-center">Create Account</h4>
            <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
                <DataAnnotationsValidator />

                <div class="row mb-3">
                    <div class="col">
                        <label for="inputUsername">Username</label>
                        <input type="text" id="inputUsername" class="form-control" placeholder="Username" @bind="registerParameters.UserName">
                        <ValidationMessage For="@(() => registerParameters.UserName)" />
                    </div>
                    <div class="col">
                        <label for="inputUserEmail">Email address</label>
                        <input type="email" id="inputUserEmail" class="form-control" placeholder="Email address" @bind="registerParameters.Email">
                        <ValidationMessage For="@(() => registerParameters.Email)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label for="inputMobileNo">Mobile No.</label>
                        <input type="text" id="inputMobileNo" class="form-control" placeholder="Mobile No." @bind="registerParameters.MobileNo">
                        <ValidationMessage For="@(() => registerParameters.MobileNo)" />
                    </div>
                    <div class="col">
                        <label for="inputPassword">Password</label>
                        <input type="password" id="inputPassword" class="form-control" placeholder="Password" @bind="registerParameters.Password">
                        <ValidationMessage For="@(() => registerParameters.Password)" />
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col">
                        <label for="inputPasswordConfirm">Confirm Password</label>
                        <input type="password" id="inputPasswordConfirm" class="form-control" placeholder="Confirm Password" @bind="registerParameters.PasswordConfirm">
                        <ValidationMessage For="@(() => registerParameters.PasswordConfirm)" />
                    </div>
                    <div class="col">
                        <label for="inputGender">Gender</label>
                        <select id="inputGender" class="form-control" @bind="registerParameters.Gender">                        
                            @foreach (GenderEnum gender in Enum.GetValues(typeof(GenderEnum)))
                            {
                                <option value="@gender">@gender.ToString()</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => registerParameters.Gender)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <label for="inputDob">Date of Birth</label>
                        <input type="date" id="inputDob" class="form-control" placeholder="Date of Birth" @bind="registerParameters.Dob">
                        <ValidationMessage For="@(() => registerParameters.Dob)" />
                    </div>
                    <div class="col">
                        <label for="inputAddress">Address</label>
                        <input type="text" id="inputAddress" class="form-control" placeholder="Address" @bind="registerParameters.Address">
                        <ValidationMessage For="@(() => registerParameters.Address)" />
                    </div>
                </div>

                <button type="submit" class="btn btn-primary btn-block mb-2">Register</button>

                <label class="text-danger">@error</label>

            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<UserViewModel> users;
    private List<string> Roles;
    string Title = "Admin Control Panel";
    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool TaskCompleted = false;
    int Tab = 1;

    protected override async Task OnInitializedAsync()
    {
        users = await authorizeApi.GetUsers();
        Roles = await authStateProvider.GetRoles();
    }

    private async Task UpdateUserRole(UserViewModel user)
    {
        try
        {
            Message = string.Empty;
            MessageBody = "Thank you!";
            show = true;
            TaskCompleted = false;
            Message = "Please wait";
            await authorizeApi.UpdateUserRole(user);
            Message = "Successfully Updated";
            TaskCompleted = true;
        }
        catch (Exception ex)
        {
            Message = "Error";
            Message = ex.Message;
            TaskCompleted = true;
        }
    }

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        Message = string.Empty;
        MessageBody = "Thank you!";
        show = true;
        TaskCompleted = false;
        try
        {
            Message = "Please wait";
            await authorizeApi.Register(registerParameters);
            Message = "Successfully Registered";
            TaskCompleted = true;
            ResetForm(); // Reset the form after successful registration
        }
        catch (Exception ex)
        {
            error = ex.Message;
            TaskCompleted = true;
        }
    }

    private async void ResetForm()
    {
        show = false;
        if (Message.Contains("Successfully Registered"))
        {
            registerParameters = new();
        }
        users = await authorizeApi.GetUsers();
        StateHasChanged();
    }
}
