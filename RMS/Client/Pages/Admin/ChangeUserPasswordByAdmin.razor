@page "/pass-reset"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
@using RMS.Client.Shared.Popup
@using RMS.Dto.Auth
@inject IAuthorizeApi authorizeApi
@attribute [Authorize(Roles = "SuperAdmin,Admin")]

<div class="p-2">
    <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="resetPassword">
        <DataAnnotationsValidator />
        <div class="col-auto" style=" width:100%; text-align:center; line-height:0px; margin-top: 2px;">
            <UiAlert Model="alert"></UiAlert>
        </div>
        <div class="form-floating mb-3">

            <InputSelect @bind-Value="resetPassword.Email" class="form-control" autofocus placeholder="Select User">
                <option>-Select User-</option>
                @foreach (var user in users)
                {
                    <option value="@user.Email">@user.Email</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => resetPassword.Email)" />
        </div>

        <div class="form-floating mb-3">
            <InputText id="NewPassword" type="password" class="form-control" @bind-Value="resetPassword.NewPassword" placeholder="Nre Password" />
            <label for="NewPassword">New Password</label>
            <ValidationMessage For="@(() => resetPassword.NewPassword)" />
        </div>

        <div class="form-floating mb-3">
            <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="resetPassword.ConfirmPassword" placeholder="Confirm Password" />
            <label for="ConfirmPassword">Confirm Password</label>
            <ValidationMessage For="@(() => resetPassword.ConfirmPassword)" />
        </div>

        <div class="d-grid gap-2">
            <button class="btn btn-lg btn-primary btn-sm" type="submit">Update</button>
        </div>

    </EditForm>

</div>
<Dailog Title="@Message" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {
        @if (TaskCompleted)
        {
            <div style="text-align:center;">
                @MessageBody
            </div>
        }
        else
        {
            <div style="text-align:center">
                <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
            </div>
        }
    }
</Dailog>

@code {
    ResetPasswordByAdmin resetPassword = new();
    private Timer _timer;
    private int _delay = 3000;

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private List<UserViewModel> users = new();

    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool TaskCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        alert ??= new AlertModel();
        users = await authorizeApi.GetUsers();
    }

    async Task OnSubmit()
    {
        Message = string.Empty;
        MessageBody = "Thank you!";
        show = true;
        TaskCompleted = false;
        try
        {
            Message = "Please wait";
            await authorizeApi.RequestPasswordResetByEmail(resetPassword);
            Message = "Successfully Updated";
            TaskCompleted = true;
        }
        catch (Exception ex)
        {
            Message = "Error";
            Message = ex.Message;
            TaskCompleted = true;
        }
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }
    private void ResetForm()
    {
        show = false;
        if (Message.Contains("Successfully Updated"))
        {
            resetPassword = new();
        }
        StateHasChanged();
    }
}