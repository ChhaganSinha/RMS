@page "/role-management"
@using RMS.Dto.RBAC
@inject IRoleService RoleService

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Role Management
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Role Management</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h5>Create New Role</h5>
        </div>
        <div class="card-body">
            <form @onsubmit="CreateRole" class="form-inline">
                <div class="form-group mb-2">
                    <input type="text" @bind="newRoleName" class="form-control mr-2" placeholder="Enter role name" required />
                </div>
                <button type="submit" class="btn btn-primary mb-2">Create Role</button>
            </form>
        </div>
    </div>

    @if (roles != null)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5>Existing Roles</h5>
            </div>
            <div class="card-body">
                <UiAlert Model="alert"></UiAlert>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th>Role Name</th>
                                <th>General Permissions</th>
                                <th>Page Permissions</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in roles)
                            {
                                <tr>
                                    <td>@role.Name</td>
                                    <td>
                                        <select @bind="role.SelectedPermission" class="form-control text-primary font-weight-bold">
                                            <option disabled selected value="">-- Select Permission --</option>
                                            <option value="View">View</option>
                                            <option value="Edit">Edit</option>
                                            <option value="FullAccess">Full Access</option>
                                        </select>
                                    </td>

                                    <td>
                                        <div style="max-height: 100px; overflow-y: auto;">
                                            @foreach (var page in allPages)
                                            {
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox"
                                                           id="@($"chk-{page}")"
                                                           @bind="GetOrCreatePagePermission(role, page).CanView" />
                                                    <label class="form-check-label" for="@($"chk-{page}")">@(@page)</label>
                                                </div>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-success" @onclick="() => AssignPermission(role)">Assign</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string newRoleName;
    private List<RoleViewModel> roles;
    private List<string> allPages = new List<string> { "AddHallCategory", "RoleManagement", "OtherPage1", "OtherPage2" };

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private Timer _timer;
    private int _delay = 2500;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        roles = await RoleService.GetRoles();
    }

    private async Task CreateRole()
    {
        await RoleService.CreateRole(newRoleName);
        roles = await RoleService.GetRoles();
        newRoleName = string.Empty;
    }

    private PagePermissionViewModel GetOrCreatePagePermission(RoleViewModel role, string pageName)
    {
        var permission = role.PagePermissions.FirstOrDefault(p => p.PageName == pageName);
        if (permission == null)
        {
            permission = new PagePermissionViewModel { PageName = pageName, CanView = false };
            role.PagePermissions.Add(permission);
        }
        return permission;
    }

    private async Task AssignPermission(RoleViewModel role)
    {
        alert?.Clear();
        await RoleService.AssignPermission(role.Name, role.SelectedPermission, role.PagePermissions);
        alert?.SetSuccess("Role Updated.");
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }
}
