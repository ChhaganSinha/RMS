@page "/role-management"
@using RMS.Dto.RBAC
@inject IRoleService RoleService
@attribute [Authorize(Roles = "SuperAdmin,Admin")]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Access Control
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Access Control</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="card">
        <div class="card-header" style="padding: 3px 28px;">
            <h5>Create New Role</h5>
        </div>
        <div class="card-body ">
            <form @onsubmit="CreateRole" class="form-inline">
                <div class="form-group mb-2">
                    <input type="text" @bind="newRoleName" class="form-control mr-2" placeholder="Enter role name" required />
                </div>
                <button type="submit" class="btn btn-primary mb-2">Create Role</button>
            </form>
        </div>
    </div>

    @if (roles != null)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5>Existing Roles</h5>
            </div>
            <div class="card-body">
                <UiAlert Model="alert"></UiAlert>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th>Role Name</th>
                                <th>General Permissions</th>
                                <th>Page Permissions</th>
                                <th style="width: 100px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in rolesWithPermission)
                            {
                                <tr>
                                    <td>@role.Name</td>
                                    <td>
                                        <select @bind-value="role.SelectedPermission" class="form-control" @onchange="e => OnPermissionChange(role, e)" @bind-value:event="oninput">
                                            <option disabled value="">-- Select Permission --</option>
                                            <option value="View">View</option>
                                            <option value="Edit">Edit</option>
                                            <option value="FullAccess">Full Access</option>
                                        </select>
                                    </td>

                                    <td>
                                        <div style="max-height: 200px; overflow-y: auto; padding: 4px;">
                                            @foreach (var page in allPages)
                                            {
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox"
                                                           id="@($"chk-{role.Name}-{page}")"
                                                           @bind="@GetOrCreatePagePermission(role, page).CanView" />
                                                    <label class="form-check-label" for="@($"chk-{role.Name}-{page}")">@(@page)</label>
                                                </div>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-success" @onclick="() => AssignPermission(role)">Assign</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string newRoleName;
    private List<RoleViewModel> roles = new();
    private List<RoleViewModel> rolesWithPermission = new();
    private List<string> allPages = new List<string>
    {
        "Dashboard",
        "RoomCategories",
        "RoomFacilities",
        "Rooms",
        "HallCategories",
        "HallFacilities",
        "Hall",
        "EmployeeDesignation",
        "EmployeeDepartment",
        "Employees",
        "AttendanceList",
        "AttendanceReport",
        "LeaveType",
        "Leave",
        "SalarySetup",
        "AdvanceSalary",
        "SalaryGenerate",
        "ProductCategory",
        "UnitNames",
        "ProductList",
        "Supplier",
        "Purchase",
        "DestroyProducts",
        "SaleProducts",
        "RoomStatus",
        "BookingList",
        "NewBooking",
        "BookingType",
        "AddCustomer",
        "CustomerList",
        "MenuType",
        "FoodCategory",
        "AddVariants",
        "AddFood",
        "TableConfig",
        "PosInvoice",
        "CheckList",
        "AssignCleaning",
        "RoomCleaning",
        "AllRecord",
        "CleaningReport",
        "AddUsers",
        "AccessControl",
        "AppRoles"
    };

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    private Timer _timer;
    private int _delay = 2500;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        roles = await RoleService.GetRoles();
        rolesWithPermission = await RoleService.GetRolesWithPermissions();
    }

    private async Task CreateRole()
    {
        await RoleService.CreateRole(newRoleName);
        roles = await RoleService.GetRoles();

        newRoleName = string.Empty;
    }

    private PagePermissionViewModel GetOrCreatePagePermission(RoleViewModel role, string pageName)
    {
        var permission = role.PagePermissions.FirstOrDefault(p => p.PageName == pageName);
        if (permission == null)
        {
            permission = new PagePermissionViewModel { PageName = pageName, CanView = false };
            role.PagePermissions.Add(permission);
        }
        return permission;
    }

    private void OnPermissionChange(RoleViewModel role, ChangeEventArgs e)
    {
        role.SelectedPermission = e.Value?.ToString() ?? string.Empty;
        UpdatePagePermissions(role);
    }

    private void UpdatePagePermissions(RoleViewModel role)
    {
        foreach (var pagePermission in role.PagePermissions)
        {
            switch (role.SelectedPermission)
            {
                case "FullAccess":
                    pagePermission.CanView = true;
                    pagePermission.CanEdit = true;
                    pagePermission.HasFullAccess = true;
                    break;
                case "Edit":
                    pagePermission.CanView = true;
                    pagePermission.CanEdit = true;
                    pagePermission.HasFullAccess = false;
                    break;
                case "View":
                    pagePermission.CanView = true;
                    pagePermission.CanEdit = false;
                    pagePermission.HasFullAccess = false;
                    break;
                default:
                    pagePermission.CanView = false;
                    pagePermission.CanEdit = false;
                    pagePermission.HasFullAccess = false;
                    break;
            }
        }
    }

    private async Task AssignPermission(RoleViewModel role)
    {
        try
        {
            alert?.Clear();
            await RoleService.AssignPermission(role.Name, role.SelectedPermission, role.PagePermissions);
            alert?.SetSuccess("Role Updated.");
            StateHasChanged();
            _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
        }
        catch (Exception ex)
        {
            alert?.SetError($"Error assigning permissions: {ex.Message}");
        }
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }
}
