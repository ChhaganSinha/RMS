@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridButton
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PermissionService PermissionService

@if (canView)
{
    @if (_task?.IsCompleted == true)
    {
        <div class="row">
            <div class="col-sm-12">
                <GridComponent @ref="Component" T="RoomCategories" Grid="@_grid"></GridComponent>
            </div>
        </div>
    }
    else
    {
        <div class="col-sm-12" style="margin-top:40vh">
            <div class="loader-progress"></div>
        </div>
    }
}
else
{
    <div class="col-sm-12">
        <p>You do not have permission to view this page.</p>
    </div>
}

@code
{
    private CGrid<RoomCategories> _grid;
    private Task _task;
    private static GridComponent<RoomCategories> Component;
    static bool filter = true;
    static AuthenticationState authState;

    private static bool canView = false;
    private static bool canEdit = false;
    private static bool hasFullAccess = false;

    Action<IGridColumnCollection<RoomCategories>> columns = c =>
    {
        c.Add(o => o.Id).SetWidth("10%").Css("table-bordered").Titled("SN.").Filterable(filter);
        c.Add(o => o.Name).SetWidth("80%").Css("table-bordered").Titled("RoomCategories Name").Filterable(filter);

        if (canEdit || hasFullAccess)
        {
            c.Add().Encoded(false).Sanitized(false)
                .RenderComponentAs<RoomCategoriesEditButton>()
                .SetWidth("10px").Titled("Edit");
        }

        if (hasFullAccess)
        {
            c.Add().Encoded(false).Sanitized(false)
                .RenderComponentAs<RoomCategoriesDeleteButton>(new List<Action<object>> { RefreshGrid })
                .SetWidth("10px").Titled("Delete");
        }
    };

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var permissions = await PermissionService.HasPermission("RoomCategories");
            if (permissions != null)
            {
                canView = permissions.CanView;
                canEdit = permissions.CanEdit;
                hasFullAccess = permissions.HasFullAccess;
            }

            if (!canView) return;

            string url = $"odata/RoomCategories";
            var query = new QueryDictionary<StringValues>();
            query.Add("grid-sorting", "Id__1__1");

            var client = new GridODataClient<RoomCategories>(HttpClient, url, query, false, "ordersGrid", columns, 5)
                .Sortable(true)
                // .Filterable(true)
                // .ClearFiltersButton(true)
                .SetStriped(true)
                .WithMultipleFilters()
                .WithGridItemsCount()
                // .SetExcelExport(true, true, "RoomCategories.xlsx")
                .ChangePageSize(true)
                .EmptyText("No data available")
                .SetKeyboard(true)
                .Searchable(true, false, false);

            _grid = client.Grid;
            _task = client.UpdateGrid();
            await _task;
        }
        catch (Exception ex)
        {
            // Log error and handle exception if needed
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }

    public static async void RefreshGrid(object item)
    {
        if (Component != null)
        {
            await Component.UpdateGrid();
        }
    }

    public static async Task RefreshGridAsync()
    {
        if (Component != null)
        {
            await Component.UpdateGrid();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialization logic if needed
    }
}
