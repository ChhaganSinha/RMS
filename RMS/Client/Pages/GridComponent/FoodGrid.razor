@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridButton
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PermissionService PermissionService

@if (_task?.IsCompleted ?? false)
{
    <div class="row">
        <div class="col-sm-12">
            <GridComponent @ref="Component" T="Food" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <div class="col-sm-12" style="margin-top:40vh">
        <div class="loader-progress"></div>
    </div>
}

@code
{
    private CGrid<Food> _grid;
    private Task _task;
    private static GridComponent<Food> Component;
    static bool filter = true;
    static AuthenticationState authState;


    // Permission flags
    private static bool canView = false;
    private static bool canEdit = false;
    private static bool hasFullAccess = false;

    private string GetImageHtml(Food food)
    {
        if (food.ImageFile != null && food.ImageFile.Length > 0)
        {
            var base64Image = Convert.ToBase64String(food.ImageFile);
            return $"<img src=\"data:image/png;base64,{base64Image}\" style=\"max-width: 100px; max-height: 100px;\" />";
        }
        return string.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // Check permissions
        var permissions = await PermissionService.HasPermission("AddFood");
        if (permissions != null)
        {
            canView = permissions.CanView;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }

        string url = $"odata/Food";
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-sorting", "Id__1__1");

        Action<IGridColumnCollection<Food>> columns = c =>
        {
            if (canView)
            {
                c.Add(o => o.Id).SetWidth("10%").Css("table-bordered").Titled("SN.").Filterable(filter);
                c.Add().Encoded(false).Sanitized(false).SetWidth("15%").Css("table-bordered").Titled("Image")
                    .RenderValueAs(o => GetImageHtml(o));
                c.Add(o => o.FoodName).Css("table-bordered").Titled("Food Name").Filterable(filter);
                c.Add(o => o.MenuType).Css("table-bordered").Titled("Menu Type").Filterable(filter);
                c.Add(o => o.FoodCategory).Css("table-bordered").Titled("Food Category").Filterable(filter);
                c.Add(o => o.Variant).Css("table-bordered").Titled("Variant").Filterable(filter);
                c.Add(o => o.Price).Css("table-bordered").Titled("Price").Filterable(filter).Format("{0:F2}");
                c.Add(o => o.TaxPercentage).Css("table-bordered").Titled("Tax %").Filterable(filter).Format("{0:F2}");
                c.Add(o => o.CookingTime).Css("table-bordered").Titled("Cooking Time").Filterable(filter);

                if (canEdit || hasFullAccess)
                {
                    c.Add().Encoded(false).Sanitized(false).RenderComponentAs<AddFoodEditButton>().SetWidth("10px").Titled("Edit");
                }

                if (hasFullAccess)
                {
                    c.Add().Encoded(false).Sanitized(false).RenderComponentAs<AddFoodDeleteButton>(new List<Action<object>> { RefreshGrid }).SetWidth("10px").Titled("Delete");
                }
            }
        };

        var client = new GridODataClient<Food>(HttpClient, url, query, false, "ordersGrid", columns, 5)
            .Sortable(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .ChangePageSize(true)
            .EmptyText("No data available")
            .SetKeyboard(true)
            .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
    }

    public static async void RefreshGrid(object item)
    {
        await Component.UpdateGrid();
    }
    public static async Task RefreshGridAsync()
    {
        if (Component != null)
        {
            await Component.UpdateGrid();
        }
    }
}
