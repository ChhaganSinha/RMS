@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using RMS.Client.Pages.GridButton
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PermissionService PermissionService

@if (_task?.IsCompleted ?? false)
{
    @if (canView)
    {
        <div class="row">
            <div class="col-sm-12">
                <GridComponent @ref="Component" T="CheckList" Grid="@_grid"></GridComponent>
            </div>
        </div>
    }
    else
    {
        <p>You do not have permission to view this grid.</p>
    }
}
else
{
    <div class="col-sm-12" style="margin-top:40vh">
        <div class="loader-progress"></div>
    </div>
}

@code
{
    private CGrid<CheckList> _grid;
    private Task _task;
    private static GridComponent<CheckList> Component;
    static bool filter = true;
    static AuthenticationState authState;

    private static bool canView = false;
    private static bool canEdit = false;
    private static bool hasFullAccess = false;

    Action<IGridColumnCollection<CheckList>> columns = c =>
    {
        c.Add(o => o.Id).SetWidth("10%").Css("table-bordered").Titled("SN.").Filterable(filter);
        c.Add(o => o.Name).SetWidth("80%").Css("table-bordered").Titled("Type Name").Filterable(filter);
        c.Add(o => o.Type).SetWidth("80%").Css("table-bordered").Titled("Type").Filterable(filter);

        if (canEdit)
        {
            c.Add().Encoded(false).Sanitized(false).RenderComponentAs<CheckListEditButton>().SetWidth("10px").Titled("Edit");
        }

        if (canEdit || hasFullAccess)
        {
            c.Add().Encoded(false).Sanitized(false).RenderComponentAs<CheckListDeleteButton>(new List<Action<object>> { RefreshGrid }).SetWidth("10px").Titled("Delete");
        }
    };

    protected override async Task OnParametersSetAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check permissions
        var permissions = await PermissionService.HasPermission("CheckList");

        if (permissions != null)
        {
            canView = permissions.CanView;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }

        string url = $"odata/CheckList";
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-sorting", "Id__1__1");

        var client = new GridODataClient<CheckList>(HttpClient, url, query, false, "ordersGrid", columns, 5)
            .Sortable(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .ChangePageSize(true)
            .EmptyText("No data available")
            .SetKeyboard(true)
            .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
    }

    public static async void RefreshGrid(object item)
    {
        await Component.UpdateGrid();
    }

    public static async Task RefreshGridAsync()
    {
        if (Component != null)
        {
            await Component.UpdateGrid();
        }
    }
}
