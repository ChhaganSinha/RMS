@page "/hall"

@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject PermissionService PermissionService

@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations;
@using RMS.Dto.Enum
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Hall
                        @if (canEdit || hasFullAccess)
                        {
                            <a @onclick="OnAdd" style="cursor:pointer">
                                <i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Hall"></i>
                            </a>
                        }
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Hall</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (canView || canEdit || hasFullAccess)
{
    <div class="row">
        <div class="col-sm-12 p-0">
            <div class="card-body p-2 mt-n3">
                <HallGrid />
            </div>
        </div>
    </div>

    <PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
        @if (show)
        {
            <EditForm Model="model" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <div class="col-md-4">
                        <label class="col-form-label bold-font required-field">Hall Number</label>
                        <InputText @bind-Value="@model.HallNumber" id="HallNumber" class="form-control"></InputText>
                        <ValidationMessage For="() => model.HallNumber" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font">Price</label>
                        <InputNumber @bind-Value="@model.Price" id="Price" class="form-control"></InputNumber>
                        <ValidationMessage For="() => model.Price" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font">Floor</label>
                        <select class="form-control" @bind="model.floor">
                            @foreach (var floor in Enum.GetValues(typeof(Floor)).Cast<Floor>())
                            {
                                <option value="@floor">@floor</option>
                            }
                        </select>
                        <ValidationMessage For="() => model.floor" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-6">
                        <label class="col-form-label bold-font">Select Category</label>
                        <HxSelect TItem="HallCategories"
                                  TValue="int?"
                                  Data="Categories"
                                  @bind-Value="categoriesId"
                                  TextSelector="@(Categories => Categories.Name)"
                                  ValueSelector="@(Categories => Categories.Id)"
                                  Nullable="true"
                                  NullText="-select-"
                                  NullDataText="Loading categories..." />
                        <ValidationMessage For="() => model.Category" />
                    </div>
                    <div class="col-md-6">
                        <label class="col-form-label bold-font">Select Facilities</label>
                        <HxMultiSelect TItem="HallFacilities"
                                       AutoSort="false"
                                       TValue="int"
                                       Data="@Facilities"
                                       @bind-Value="@SelectedFacilities"
                                       TextSelector="@(p => p.Name)"
                                       ValueSelector="@(p => p.Id)"
                                       EmptyText="- Select -"
                                       NullDataText="Loading..." />
                        @if (SelectedFacilities.Count() == 0 && IsError)
                        {
                            <span style="color:red">Please select at least one Facility</span>
                        }
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-4">
                        <label class="col-form-label bold-font" style="padding-right: 0;">No. of Beds</label>
                        <InputNumber @bind-Value="@model.NumberOfBed" id="NumberOfBed" class="form-control"></InputNumber>
                        <ValidationMessage For="() => model.NumberOfBed" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font" style="padding-right: 0;">Capacity</label>
                        <InputText @bind-Value="@model.Capacity" id="Capacity" class="form-control"></InputText>
                        <ValidationMessage For="() => model.Capacity" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font" style="padding-right: 0;">Extra Capacity</label>
                        <InputCheckbox @bind-Value="model.ExtraCapacity" id="ExtraCapacity" class="form-check-input" style="margin-left: -100px;margin-top: 45px; font-size: x-large;margin-top: 42px;" />
                        <ValidationMessage For="() => model.ExtraCapacity" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-6">
                        <label class="col-form-label bold-font" style="padding-right: 0;">Bed Charge</label>
                        <InputText @bind-Value="@model.BedCharge" id="BedCharge" class="form-control"></InputText>
                        <ValidationMessage For="() => model.BedCharge" />
                    </div>
                    <div class="col-md-6">
                        <label class="col-form-label bold-font" style="padding-right: 0;">Person Charge</label>
                        <InputText @bind-Value="@model.PersonCharge" id="PersonCharge" class="form-control"></InputText>
                        <ValidationMessage For="() => model.PersonCharge" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-3">
                        <label class="col-form-label bold-font" style="padding-right: 0;">IsActive</label>
                        <InputCheckbox @bind-Value="model.IsActive" class="form-check-input" style="font-size: x-large;margin-top: 42px; margin-left: -56px;" />
                        <ValidationMessage For="() => model.IsActive" />
                    </div>
                    <div class="col-md-9">
                        <label class="col-form-label bold-font">Upload Image</label>
                        <InputFile OnChange="HandleFileSelected" class="form-control" />
                        <br />
                        <img id="imgPreview" src="@imageDataUrl" style="max-width: 200px; max-height: 200px; display: @(imageDataUrl == null ? "none" : "block");" />
                        <ValidationMessage For="() => model.ImageFile" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-12">
                        <label class="col-form-label bold-font" style="padding-right: 0;">Descriptions</label>
                        <InputTextArea @bind-Value="@model.Descriptions" id="Descriptions" class="form-control"></InputTextArea>
                        <ValidationMessage For="() => model.Descriptions" />
                    </div>
                </div>
                @if (process)
                {
                    <div style="text-align:center">
                        <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                    </div>
                }
                <UiAlert Model="alert"></UiAlert>
                <hr style="margin-bottom: 2px;" />
                <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
            </EditForm>
            <br />
        }
    </PageDialog>
}
else
{
    <div class="alert alert-danger">You do not have permission to view this page.</div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private int? categoriesId;

    Hall model = new();
    public string Title = "Add Hall";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;

    [Required]
    private List<int> SelectedFacilities { get; set; } = new();
    private bool IsError = false;
    List<HallCategories> Categories = new();
    private List<HallFacilities> Facilities = new();
    Dictionary<int, List<int>> HallFacilitiesMap = new Dictionary<int, List<int>>();

    private string imageDataUrl;

    // Permission variables
    private static bool canView = false;
    private static bool canEdit = false;
    private static bool hasFullAccess = false;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Store the image data in the model
            model.ImageFile = buffer;

            // Convert the image to a data URL for preview
            imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();

        // Load Hall categories and facilities
        Categories = (await client.GetAllHallCategory()).ToList();
        Facilities = (await client.GetAllHallFacility()).ToList();

        // Fetch permissions
        var permissions = await PermissionService.HasPermission("Hall");
        if (permissions != null)
        {
            canView = permissions.CanView;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }
        if (!canView)
        {
            // Redirect or handle unauthorized access
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }

        // If Id is provided, load Hall details and populate form
        if (Id > 0)
        {
            model = await client.GetHallById(Id);

            // Convert existing image data to base64 string for preview
            if (model.ImageFile != null && model.ImageFile.Length > 0)
            {
                imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(model.ImageFile)}";
            }

            var hallFacilitiesMap = await client.GetFacilitiesMappingByHallId(model.Id);
            SelectedFacilities.AddRange(hallFacilitiesMap.Select(o => o.FacilityId));
        }
    }

    public async Task OnSave()
    {
        if (SelectedFacilities.Count() == 0)
        {
            IsError = true;
            return;
        }
        process = true;
        alert?.Clear();

        model.CategoryId = categoriesId;
        if (categoriesId != null)
            model.Category = Categories.Where(x => x.Id == categoriesId).Select(x => x.Name).First();
        // Ensure the model includes the selected facilities
        var response = await client.UpsertHallAsync(model);
        if (response.IsSuccess)
        {
            if (response.Result.Id > 0)
            {
                if (HallFacilitiesMap.ContainsKey(response.Result.Id))
                {
                    HallFacilitiesMap[response.Result.Id] = SelectedFacilities.Select(id => id).ToList();
                }
                else
                {
                    HallFacilitiesMap.Add(response.Result.Id, SelectedFacilities.Select(id => id).ToList());
                }

                var result = await client.UpsertHallFacilitiesMapping(HallFacilitiesMap);
            }
            await HallGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new Hall(); // Reset model after saving
            categoriesId = null;
            SelectedFacilities = new();
            imageDataUrl = string.Empty;
        }
        else
        {
            alert?.SetError(response.Message);
        }

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new Hall();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new Hall();
        categoriesId = null;
    }

    public void OnAdd()
    {
        if (canEdit || hasFullAccess)
        {
            model = new Hall();
            categoriesId = null;
            SelectedFacilities = new();
            show = true;
        }
    }
}
