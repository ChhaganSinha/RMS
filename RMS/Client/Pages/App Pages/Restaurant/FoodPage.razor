@page "/add-food"
@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations;
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Add Food
                        <a @onclick="OnAdd" style="cursor:pointer"><i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Food"></i></a>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Add Food</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <FoodGrid />
        </div>
    </div>
</div>

<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {
        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <!-- Food Name -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font required-field">Food Name</label>
                    <InputText @bind-Value="@model.FoodName" id="FoodName" class="form-control"></InputText>
                    <ValidationMessage For="() => model.FoodName" />
                </div>

                <!-- Price -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Price</label>
                    <InputNumber @bind-Value="@model.Price" id="Price" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Price" />
                </div>

                <!-- Tax Percentage -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Tax %</label>
                    <InputNumber @bind-Value="@model.TaxPercentage" id="TaxPercentage" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.TaxPercentage" />
                </div>
            </div>

            <div class="form-group row">
                <!-- Select Menu Type -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Select Menu Type</label>
                    <HxMultiSelect TItem="MenuType"
                                   AutoSort="false"
                                   TValue="int"
                                   Data="@menuTypes"
                                   @bind-Value="@selectedMenuTypeid"
                                   TextSelector="@(p => p.Name)"
                                   ValueSelector="@(p => p.Id)"
                                   EmptyText="- Select -"
                                   NullDataText="Loading..." />
                </div>

                <!-- Select Food Category -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Select Food Category</label>
                    <HxMultiSelect TItem="FoodCategory"
                                   AutoSort="false"
                                   TValue="int"
                                   Data="@Category"
                                   @bind-Value="@foodcategoryid"
                                   TextSelector="@(p => p.Name)"
                                   ValueSelector="@(p => p.Id)"
                                   EmptyText="- Select -"
                                   NullDataText="Loading..." />
                    
                </div>

                <!-- Select Food Variants -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Select Food Variants</label>
                    <HxSelect TItem="AddVariants"
                              TValue="int?"
                              Data="Variants"
                              @bind-Value="variantsid"
                              TextSelector="@(Variants => Variants.Name)"
                              ValueSelector="@(Variants => Variants.Id)"
                              Nullable="true"
                              NullText="- Select -"
                              NullDataText="Loading variants..." />
                    <ValidationMessage For="() => model.Variant" />
                </div>
            </div>

            <div class="form-group row">
                <!-- Cooking Time -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Cooking Time</label>
                    <InputText @bind-Value="@model.CookingTime" id="CookingTime" class="form-control"></InputText>
                    <ValidationMessage For="() => model.CookingTime" />
                </div>

                <!-- Upload Image -->
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Upload Image</label>
                    <InputFile OnChange="HandleFileSelected" class="form-control" />
                    <br />
                    <img id="imgPreview" src="@imageDataUrl" style="max-width: 200px; max-height: 200px; display: @(imageDataUrl == null ? "none" : "block");" />
                    <ValidationMessage For="() => model.ImageFile" />
                </div>
            </div>

            <!-- Loading Indicator and Alerts -->
            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }

            <UiAlert Model="alert"></UiAlert>
            <hr style="margin-bottom: 2px;" />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</PageDialog>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }


    private int? variantsid;

    Food model = new();
    public string Title = "Add Food";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;

    [Required]
    private List<int> selectedMenuTypeid { get; set; } = new();
    private List<int> foodcategoryid { get; set; } = new();
    private bool IsError = false;
    private List<MenuType> menuTypes = new();
    private List<FoodCategory> Category = new();
    private List<AddVariants> Variants = new();
    Dictionary<int, List<int>> FoodMenuTypeMap = new Dictionary<int, List<int>>();
    Dictionary<int, List<int>> FoodCategoryMap = new Dictionary<int, List<int>>();

    private string imageDataUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Store the image data in the model
            model.ImageFile = buffer;

            // Convert the image to a data URL for preview
            imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();

        // Load room categories and facilities
        menuTypes = (await client.GetAllMenuType()).ToList();
        Category = (await client.GetAllFoodCategory()).ToList();
        Variants = (await client.GetAllAddVariants()).ToList();

        // If Id is provided, load room details and populate form
        if (Id > 0)
        {
            model = await client.GetFoodById(Id);

            // convert existing image data to base64 string for preview
            if (model.ImageFile != null && model.ImageFile.Length > 0)
            {
                imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(model.ImageFile)}";
            }

            var foodMenuTypeMap = await client.GetFoodMenuTypeByFoodId(model.Id);
            selectedMenuTypeid.AddRange(foodMenuTypeMap.Select(o => o.MenuTypeId));
            var foodCategoryMap = await client.GetFoodCategoryByFoodId(model.Id);
            foodcategoryid.AddRange(foodCategoryMap.Select(o => o.FoodCategoryId));
        }
    }

    public async Task OnSave()
    {
        if (selectedMenuTypeid.Count() == 0)
        {
            IsError = true;
            return;
        }

        if (foodcategoryid.Count() == 0)
        {
            IsError = true;
            return;
        }
        process = true;
        alert?.Clear();

        //model.FoodCategoryId = foodcategoryid;
        if (foodcategoryid.Count > 0)
            model.FoodCategory = string.Join(", ", Category.Where(Category => foodcategoryid.Contains(Category.Id)).Select(Category => Category.Name));
        model.VariantId = variantsid;
        if (variantsid != null)
            model.Variant = Category.Where(x => x.Id == variantsid).Select(x => x.Name).First();
        if (selectedMenuTypeid.Count > 0)
            model.MenuType = string.Join(", ", menuTypes.Where(menuType => selectedMenuTypeid.Contains(menuType.Id)).Select(menuType => menuType.Name));

       
        var response = await client.UpsertFoodAsync(model);
        if (response.IsSuccess)
        {
            if (response.Result.Id > 0)
            {
                if (FoodMenuTypeMap.ContainsKey(model.Id))
                {
                    FoodMenuTypeMap[model.Id] = selectedMenuTypeid.Select(id => id).ToList();
                }
                else
                {
                    FoodMenuTypeMap.Add(model.Id, selectedMenuTypeid.Select(id => id).ToList());
                }

                var result = await client.UpsertFoodMenuTypeMapping(FoodMenuTypeMap);
            }
            if (response.Result.Id > 0)
            {
                if (FoodCategoryMap.ContainsKey(model.Id))
                {
                    FoodCategoryMap[model.Id] = foodcategoryid.Select(id => id).ToList();
                }
                else
                {
                    FoodCategoryMap.Add(model.Id, foodcategoryid.Select(id => id).ToList());
                }

                var result = await client.UpsertFoodCategoryMapping(FoodCategoryMap);
            }
            await FoodGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new Food();
            foodcategoryid = new();
            variantsid = null;
            selectedMenuTypeid = new();
            imageDataUrl = string.Empty;
        }
        else
        {
            alert?.SetError(response.Message);
        }

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new Food();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new Food();
        selectedMenuTypeid = null;
        foodcategoryid = null;
        variantsid = null;
    }

    public void OnAdd()
    {
        model = new Food();
        selectedMenuTypeid = null;
        foodcategoryid = null;
        variantsid = null;
        show = true;
    }
}

