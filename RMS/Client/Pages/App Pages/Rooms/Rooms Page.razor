@page "/rooms"
@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations;
@using RMS.Dto.Enum
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Room
                        <a @onclick="OnAdd" style="cursor:pointer"><i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Room"></i></a>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Room</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <RoomGrid />
        </div>
    </div>
</div>

<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {
       
        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div class="form-group row">
                <div class="col-md-4">
                    <label class="col-form-label bold-font required-field">Room Number</label>
                    <InputText @bind-Value="@model.RoomNumber" id="RoomNumber" class="form-control"></InputText>
                    <ValidationMessage For="() => model.RoomNumber" />
                </div>
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Price</label>
                    <InputNumber @bind-Value="@model.Price" id="Price" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Price" />
                </div>
                <div class="col-md-4">
                    <label class="col-form-label bold-font">Floor</label>
                    <select class="form-control" @bind="model.floor">
                        @foreach (var floor in Enum.GetValues(typeof(Floor)).Cast<Floor>())
                        {
                            <option value="@floor">@floor</option>
                        }
                    </select>
                    <ValidationMessage For="() => model.floor" />
                </div>
               @*  <div class="col-md-3">
                    <label class="col-form-label bold-font">Room Status</label>
                    <select class="form-control" @bind="model.Status">
                        @foreach (var status in Enum.GetValues(typeof(RoomHallStatus)).Cast<RoomHallStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                    <ValidationMessage For="() => model.Status" />
                </div> *@
            </div>
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font">Select Category</label>
                    <HxSelect TItem="RoomCategories"
                              TValue="int?"
                             
                              Data="Categories"
                              @bind-Value="categoriesId"
                              TextSelector="@(Categories => Categories.Name)"
                              ValueSelector="@(Categories => Categories.Id)"
                              Nullable="true"
                              NullText="-select-"
                              NullDataText="Loading categories..." />
                    <ValidationMessage For="() => model.Category" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font">Select Facilities</label>
                    <HxMultiSelect TItem="RoomFacilities"
                                   AutoSort="false"
                                   TValue="int"
                                   Data="@Facilities"
                                   @bind-Value="@SelectedFacilities"
                                   TextSelector="@(p => p.Name)"
                                   ValueSelector="@(p => p.Id)"
                                   EmptyText="- Select -"
                                   NullDataText="Loading..." />
                    @if (SelectedFacilities.Count() == 0 && IsError)
                    {
                        <span style="color:red">Please select at least one Facility</span>
                    }
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-4">
                    <label class="col-form-label bold-font" style="padding-right: 0;">No. of Beds</label>
                    <InputNumber @bind-Value="@model.NumberOfBed" id="NumberOfBed" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.NumberOfBed" />
                </div>
                <div class="col-md-4">
                    <label class="col-form-label bold-font" style="padding-right: 0;">Capacity</label>
                    <InputText @bind-Value="@model.Capacity" id="Capacity" class="form-control"></InputText>
                    <ValidationMessage For="() => model.Capacity" />
                </div>
                <div class="col-md-4">
                    <label class="col-form-label bold-font" style="padding-right: 0;">Extra Capacity</label>
                    <InputCheckbox @bind-Value="model.ExtraCapacity" id="ExtraCapacity" class="form-check-input" style="margin-left: -100px;margin-top: 45px; font-size: x-large;margin-top: 42px;" />
                    <ValidationMessage For="() => model.ExtraCapacity" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font" style="padding-right: 0;">Bed Charge</label>
                    <InputText @bind-Value="@model.BedCharge" id="BedCharge" class="form-control"></InputText>
                    <ValidationMessage For="() => model.BedCharge" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font" style="padding-right: 0;">Person Charge</label>
                    <InputText @bind-Value="@model.PersonCharge" id="PersonCharge" class="form-control"></InputText>
                    <ValidationMessage For="() => model.PersonCharge" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-3">
                    <label class="col-form-label bold-font" style="padding-right: 0;">IsActive</label>
                    <InputCheckbox @bind-Value="model.IsActive" class="form-check-input" style="font-size: x-large;margin-top: 42px; margin-left: -56px;" />
                    <ValidationMessage For="() => model.IsActive" />
                </div>
                <div class="col-md-9">
                    <label class="col-form-label bold-font">Upload Image</label>
                    <InputFile OnChange="HandleFileSelected" class="form-control" />
                    <br />
                    <img id="imgPreview" src="@imageDataUrl" style="max-width: 200px; max-height: 200px; display: @(imageDataUrl == null ? "none" : "block");" />
                    <ValidationMessage For="() => model.ImageFile" />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-12">
                    <label class="col-form-label bold-font" style="padding-right: 0;">Descriptions</label>
                    <InputTextArea @bind-Value="@model.Descriptions" id="Descriptions" class="form-control"></InputTextArea>
                    <ValidationMessage For="() => model.Descriptions" />
                </div>
            </div>
            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr style="margin-bottom: 2px;" />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</PageDialog>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    private int? categoriesId;

    Room model = new();
    public string Title = "Add Room";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;

    [Required]
    private List<int> SelectedFacilities { get; set; } = new();
    private bool IsError = false;
    List<RoomCategories> Categories = new();
    private List<RoomFacilities> Facilities = new();
    Dictionary<int, List<int>> RoomFacilitiesMap = new Dictionary<int, List<int>>();

    private string imageDataUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            // Store the image data in the model
            model.ImageFile = buffer;

            // Convert the image to a data URL for preview
            imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();

        // Load room categories and facilities
        Categories = (await client.GetAllRoomCategory()).ToList();
        Facilities = (await client.GetAllRoomFacility()).ToList();

        // If Id is provided, load room details and populate form
        if (Id > 0)
        {
            model = await client.GetRoomById(Id);

            // Convert existing image data to base64 string for preview
            if (model.ImageFile != null && model.ImageFile.Length > 0)
            {
                imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(model.ImageFile)}";
            }

            var roomFacilitiesMap = await client.GetFacilitiesMappingByRoomId(model.Id);
            SelectedFacilities.AddRange(roomFacilitiesMap.Select(o => o.FacilityId));
        }
    }

    public async Task OnSave()
    {
        if (SelectedFacilities.Count() == 0)
        {
            IsError = true;
            return;
        }
        process = true;
        alert?.Clear();

        model.CategoryId = categoriesId;
        if (categoriesId != null)
            model.Category = Categories.Where(x => x.Id == categoriesId).Select(x => x.Name).First();
        // Ensure the model includes the selected facilities
        var response = await client.UpsertRoomAsync(model);
        if (response.IsSuccess)
        {
            if (response.Result.Id > 0)
            {
                if (RoomFacilitiesMap.ContainsKey(response.Result.Id))
                {
                    RoomFacilitiesMap[response.Result.Id] = SelectedFacilities.Select(id => id).ToList();
                }
                else
                {
                    RoomFacilitiesMap.Add(response.Result.Id, SelectedFacilities.Select(id => id).ToList());
                }

                var result = await client.UpsertRoomFacilitiesMapping(RoomFacilitiesMap);
            }
            await RoomGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new Room(); // Reset model after saving
            categoriesId = null;
            SelectedFacilities = new();
            imageDataUrl = string.Empty;
        }
        else
        {
            alert?.SetError(response.Message);
        }

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new Room();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new Room();
        categoriesId = null;
    }

    public void OnAdd()
    {
        model = new Room();
        categoriesId = null;
        SelectedFacilities = new();
        show = true;
    }
}

