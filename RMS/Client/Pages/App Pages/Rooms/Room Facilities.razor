@page "/room-facilities"
@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject PermissionService PermissionService
@attribute [Authorize]


<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Room Facilities
                        @if (canEdit)
                        {
                            <a @onclick="()=>show=true" style="cursor:pointer"><i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Facility"></i></a>
                        }
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Room</a></li>
                    <li class="breadcrumb-item"><a>Facilities</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (canView)
{
    <div class="row">
        <div class="col-sm-12 p-0">
            <div class="card-body p-2 mt-n3">

                <RoomFacilitiesGrid />
            </div>
        </div>
    </div>


    <SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
        @if (show)
        {
            <EditForm Model="model" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <div>
                    <input type="text" placeholder="Enter Category" @bind-value="model.Name" class="form-control mb-2" />
                    <ValidationMessage For="() => model.Name" />
                </div>
                @if (process)
                {
                    <div style="text-align:center">
                        <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                    </div>
                }
                <UiAlert Model="alert"></UiAlert>
                <hr />
                <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
            </EditForm>
            <br />
        }
    </SimpleDailog>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    RoomFacilities model = new();
    public string Title = "Add Room Facility";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;
    static AuthenticationState authState;
    private static bool canView = false;
    private static bool canEdit = false;
    private static bool hasFullAccess = false;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();

        // Check permissions
        var permissions = await PermissionService.HasPermission("RoomFacilities");
        if (permissions != null)
        {
            canView = permissions.CanView;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }
        if (!canView)
        {
            // Redirect or handle unauthorized access
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();

        var response = await client.UpsertRoomFacilityAsync(model);
        if (response.IsSuccess)
        {
            // model = response.Result;
            await RoomFacilitiesGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new();
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }
}
