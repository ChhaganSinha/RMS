@page "/employees"
@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations;
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject PermissionService PermissionService
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Employee
                        @if (canEdit)
                        {
                            <a @onclick="()=>show=true" style="cursor:pointer">
                                <i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Employee"></i>
                            </a>
                        }
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Employee</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (canView || canEdit || hasFullAccess)
{
    <div class="row">
        <div class="col-sm-12 p-0">
            <div class="card-body p-2 mt-n3">
                <EmployeesGrid />
            </div>
        </div>
    </div>

    <PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
        @if (show)
        {
            <EditForm Model="model" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <div class="col-md-6">
                        <label class="col-form-label bold-font required-field">Employee Name</label>
                        <InputText @bind-Value="@model.Name" id="name" class="form-control"></InputText>
                        <ValidationMessage For="() => model.Name" />
                    </div>
                    <div class="col-md-3">
                        <label class="col-form-label bold-font">Employee Id</label>
                        <InputText @bind-Value="@model.EmpId" id="Price" class="form-control"></InputText>
                        <ValidationMessage For="() => model.EmpId" />
                    </div>
                    <div class="col-md-3">
                        <label class="col-form-label bold-font required-field">Phone No.</label>
                        <InputText @bind-Value="@model.PhoneNumber" id="PhoneNumber" class="form-control"></InputText>
                        <ValidationMessage For="() => model.PhoneNumber" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-6">
                        <label class="col-form-label bold-font">Select Department</label>
                        <HxSelect TItem="EmployeeDepartment"
                                  TValue="int?"
                                  Data="Departments"
                                  @bind-Value="departmentId"
                                  TextSelector="@(e => e.Name)"
                                  ValueSelector="@(e => e.Id)"
                                  Nullable="true"
                                  NullText="-select-"
                                  NullDataText="Loading..." />
                        <ValidationMessage For="() => model.EmployeeDepartment" />
                    </div>
                    <div class="col-md-6">
                        <label class="col-form-label bold-font">Select Designation</label>
                        <HxSelect TItem="EmployeeDesignation"
                                  TValue="int?"
                                  Data="Designations"
                                  @bind-Value="designationId"
                                  TextSelector="@(e => e.Name)"
                                  ValueSelector="@(e => e.Id)"
                                  Nullable="true"
                                  NullText="-select-"
                                  NullDataText="Loading..." />
                        <ValidationMessage For="() => model.EmployeeDesignation" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-6">
                        <label class="col-form-label bold-font">Email</label>
                        <InputText @bind-Value="@model.Email" id="Email" class="form-control"></InputText>
                        <ValidationMessage For="() => model.Email" />
                    </div>
                    <div class="col-md-6">
                        <label class="col-form-label bold-font required-field">Address</label>
                        <InputTextArea @bind-Value="@model.Address" id="Address" class="form-control"></InputTextArea>
                        <ValidationMessage For="() => model.Address" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-4">
                        <label class="col-form-label bold-font required-field">City</label>
                        <InputText @bind-Value="@model.City" id="City" class="form-control"></InputText>
                        <ValidationMessage For="() => model.City" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font required-field">State</label>
                        <InputText @bind-Value="@model.State" id="State" class="form-control"></InputText>
                        <ValidationMessage For="() => model.State" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font">Pincode</label>
                        <InputNumber @bind-Value="@model.Pincode" id="Pincode" class="form-control"></InputNumber>
                        <ValidationMessage For="() => model.Pincode" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-md-4">
                        <label class="col-form-label bold-font required-field">Aadhar No.</label>
                        <InputText @bind-Value="@model.AadharNumber" id="AadharNumber" class="form-control"></InputText>
                        <ValidationMessage For="() => model.AadharNumber" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font">Salary</label>
                        <InputText @bind-Value="@model.Salary" id="Salary" class="form-control"></InputText>
                        <ValidationMessage For="() => model.Salary" />
                    </div>
                    <div class="col-md-4">
                        <label class="col-form-label bold-font required-field">Joining Date</label>
                        <InputDate @bind-Value="@model.joiningDate" id="joiningDate" class="form-control"></InputDate>
                        <ValidationMessage For="() => model.joiningDate" />
                    </div>
                </div>

                @if (process)
                {
                    <div style="text-align:center">
                        <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                    </div>
                }
                <UiAlert Model="alert"></UiAlert>
                <hr style="margin-bottom: 2px;" />
                @if (canEdit)
                {
                    <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
                }
            </EditForm>
            <br />
        }
    </PageDialog>
}
else
{
    <div class="col-sm-12" style="margin-top:40vh">
        <div class="loader-progress"></div>
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    Employee model = new();
    public string Title = "Add Employee";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;
    private int? designationId;
    private int? departmentId;
    private List<EmployeeDepartment> Departments = new();
    private List<EmployeeDesignation> Designations = new();

    // Permission flags
    private static bool canView = false;
    private static bool canEdit = false;
    private static bool hasFullAccess = false;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        Departments = (await client.GetAllEmployeeDepartment()).ToList();
        Designations = (await client.GetAllEmployeeDesignation()).ToList();

        // Check permissions
        var permissions = await PermissionService.HasPermission("Employees");
        if (permissions != null)
        {
            canView = permissions.CanEdit || permissions.HasFullAccess;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }
        if (!canView)
        {
            // Redirect or handle unauthorized access
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }

    }

    public async Task OnSave()
    {
        if (!canEdit && !hasFullAccess)
        {
            // Handle unauthorized action (e.g., show an error message)
            alert?.SetError("You do not have permission to perform this action.");
            return;
        }

        process = true;
        alert?.Clear();

        model.DepartmentId = departmentId;
        if (departmentId != null)
            model.EmployeeDepartment = Departments.Where(x => x.Id == departmentId).Select(x => x.Name).First();

        model.DesignationId = designationId;
        if (designationId != null)
            model.EmployeeDesignation = Designations.Where(x => x.Id == designationId).Select(x => x.Name).First();

        var response = await client.UpsertEmployeeAsync(model);
        if (response.IsSuccess)
        {
            alert?.SetSuccess(response.Message);
            model = new();
            departmentId = null;
            designationId = null;
            await EmployeesGrid.RefreshGridAsync();
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }
}
