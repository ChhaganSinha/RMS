@page "/advance-salary"
@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Advance Salary
                        <a @onclick="()=>show=true" style="cursor:pointer"><i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Hall"></i></a>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Payroll</a></li>
                    <li class="breadcrumb-item"><a>Advance Salary</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <div class="card text">
                <div class="card-body">
                  
                </div>
            </div>
        </div>
    </div>
</div>

<SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {


        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
                <div class="form-group row">
                    <div>
                        <label class="col-form-label bold-font">Select Employee</label>
                        <HxSelect TItem="Employee"
                                  TValue="int?"
                                  Data="Employees"
                                  @bind-Value="employeeId"
                                  TextSelector="@(e => e.Name)"
                                  ValueSelector="@(e => e.Id)"
                                  Nullable="true"
                                  NullText="-select-"
                                  NullDataText="Loading..." />

                            @if(employeeId == null && submit)
                            {
                                <p class="text-danger">Please select one</p>
                            }
                    </div>
                </div>
                <div class="form-group row">
                    <div class="">
                        <label class="col-form-label bold-font">Advance Amount</label>
                        <InputNumber @bind-Value="model.AdvanceAmount" id="AdvanceAmount" class="form-control"></InputNumber>
                        <ValidationMessage For="() => model.AdvanceAmount" />
                    </div>

                </div>
            </div>
            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</SimpleDailog>


@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    AdvanceSalary model = new();
    public string Title = "Pay Advance";
    bool submit = false;
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;
    private List<Employee> Employees = new();
    private int ? employeeId;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        Employees = (await client.GetAllEmployee()).ToList();
    }

    public async Task OnSave()
    {
        submit = true;
        if (employeeId == null)
            return;

        process = true;
        alert?.Clear();
        submit = false;
        
        model.EmployeeId = employeeId;
        if (employeeId != null)
            model.EmployeeName = Employees.Where(x => x.Id == employeeId).Select(x => x.Name).First();

        var response = await client.UpsertAdvanceSalaryAsync(model);
        if (response.IsSuccess)
        {
            // model = response.Result;
            await AdvanceSalaryGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new();
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }
}
