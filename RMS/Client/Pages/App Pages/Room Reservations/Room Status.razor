@page "/room-status"

@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Dto
@using RMS.Dto.Enum
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Room/Hall Booking
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Room/Hall Status</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <div class="card text">
                <div class="card-body">

                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="statusDropdown" style="font-weight: bold;">Status:</label>
                            <select id="statusDropdown" class="form-control" @bind="selectedRoomStatus">
                                <option value="">All Statuses</option>
                                @foreach (var status in roomStatuses)
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="typeDropdown" style="font-weight: bold;">Room Type:</label>
                            <select id="typeDropdown" class="form-control" @bind="selectedRoomType">
                                <option value="">All Types</option>
                                @foreach (var type in roomTypes)
                                {
                                    <option value="@type.Name">@type.Name</option>
                                }
                            </select>
                        </div>
                        @* <div class="col-md-3">
                        <label for="floorDropdown">Floor:</label>
                        <select id="floorDropdown" class="form-control" @bind="selectedFloor">
                        <option value="">All Floors</option>
                        @foreach (var floor in floors)
                        {
                        <option value="@floor">@floor</option>
                        }
                        </select>
                        </div> *@
                        <div class="col-md-3 d-flex align-items-end" style="margin-to">
                            <button class="btn btn-primary" @onclick="ApplyFilters">Search</button>
                        </div>
                    </div>

                    <div class="row">
                        @if (loading)
                        {
                            <div class="col-sm-12" style="margin-top:40vh">
                                <div class="loader-progress"></div>
                            </div>
                        }
                        else
                        {
                            @if (filteredRooms.Count > 0)
                            {
                                @foreach (var room in filteredRooms)
                                {
                                    <div class="col-sm-6 col-lg-4 col-xl-3 col-xxl-2">
                                        <div class="position-relative d-flex justify-content-center">
                                            <div class="card shadow" style="width: 100%; border: 1px solid silver;">
                                                <div class="hotel-image">
                                                    <img src="data:image;base64,@Convert.ToBase64String(room.ImageFile)" class="image-inner card-img-top" alt="Room Image">
                                                </div>
                                                <div class="card-img-overlay d-flex flex-column justify-content-center text-center text-white" style="background-color: rgba(0, 0, 0, 0.5); margin: 2px; border: 1px solid firebrick;">
                                                    @* <h4 class="fs-21 mt-2 font-weight-bold">Floor: @room.floor</h4> *@
                                                    <h5 class="mt-2 font-weight-bold">Room No: @room.RoomNumber</h5>
                                                    <p class="m-0">Room Type: @room.Category</p>
                                                    <p class="m-0">Check Out: None</p>
                                                    <p class="m-0 text-c-green">Charge: @room.Price</p>
                                                    @if (room.Status == RoomHallStatus.Booked)
                                                    {
                                                        <button type="button" style="width: 60%;align-self: center;" class="btn btn-danger btn-sm mt-5 font-weight-bold" disabled>
                                                            Booked
                                                        </button>

                                                    }
                                                    else if (room.Status == RoomHallStatus.Available)
                                                    {

                                                        <button type="button" style="width: 60%;align-self: center;" class="btn btn-success btn-sm mt-5 font-weight-bold" @onclick="() => BookRoom(room)">
                                                            Available
                                                        </button>
                                                    }
                                                    else if (room.Status == RoomHallStatus.Dirty || room.Status == RoomHallStatus.UnderProcess || room.Status == RoomHallStatus.AssignedToClean || room.Status == RoomHallStatus.UnderMaintenance || room.Status == RoomHallStatus.Blocked || room.Status == RoomHallStatus.BookedAndAssignedToClean)
                                                    {
                                                        <button type="button" style="width: 100%;align-self: center;" class="btn btn-warning btn-sm mt-5 font-weight-bold" disabled>
                                                            Under Maintenance
                                                        </button>
                                                    }


                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-primary"> No Room Data Available!</p>
                            }
                        }
                    </div>



                </div>
            </div>
        </div>
    </div>
</div>


<SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {
        <EditForm Model="roomModel" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
                <div class="form-group row mb-2">
                    <label class="col-form-label col-md-6 bold-font" style="padding-right: 0;"><i class="fa fa-check-square"></i> Booking Status</label>
                    <div class="col-md-6">
                        <div class="form-control">@roomModel.Status.ToString()</div>
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-form-label col-md-6 bold-font" style="padding-right: 0;"><i class="fa fa-sort-numeric-asc"></i> Room Number</label>
                    <div class="col-md-6">
                        <div class="form-control">@roomModel.RoomNumber.ToString()</div>
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-form-label col-md-6 bold-font" style="padding-right: 0;"><i class="fa fa-th-list"></i> Room Type</label>
                    <div class="col-md-6">
                        <div class="form-control">@roomModel.Category.ToString()</div>
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-form-label col-md-6 bold-font" style="padding-right: 0;"><i class="fa fa-usd"></i> Rent/Day</label>
                    <div class="col-md-6">
                        <div class="form-control">@roomModel.Price.ToString()</div>
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-form-label col-md-6 bold-font" style="padding-right: 0;"><i class="fa fa-user"></i> Extra Capacity</label>
                    <div class="col-md-6">
                        <div class="form-control">@(roomModel.ExtraCapacity ? "Yes" : "No")</div>
                    </div>
                </div>
            </div>
            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr />
            <button type="submit" class="btn btn-primary float-right col-md-5">Book Now</button>
        </EditForm>
        <br />
    }
</SimpleDailog>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    ReservationDetailsDto model = new();
    public string Title = "Room Booking";
    bool show = false;
    bool process = false;
    bool loading = true; // Add loading flag
    private Timer _timer;
    private int _delay = 2500;

    List<Room> Rooms = new();
    List<Room> filteredRooms = new();
    List<RoomHallStatus> roomStatuses = Enum.GetValues(typeof(RoomHallStatus)).Cast<RoomHallStatus>().ToList();
    List<RoomCategories> roomTypes = new();
    List<Floor> floors = Enum.GetValues(typeof(Floor)).Cast<Floor>().ToList();
    RoomHallStatus? selectedRoomStatus = null;
    string selectedRoomType = string.Empty;
    Floor? selectedFloor = null;
    Room roomModel = new();

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        Rooms = (await client.GetAllRoom()).ToList();
        roomTypes = (await client.GetAllRoomCategory()).ToList();
        filteredRooms = Rooms;
        loading = false; // Set loading to false once data is loaded
    }

    private void ApplyFilters()
    {
        filteredRooms = Rooms
            .Where(r => (!selectedRoomStatus.HasValue || r.Status == selectedRoomStatus.Value) &&
                        (string.IsNullOrEmpty(selectedRoomType) || r.Category == selectedRoomType))
                       // (!selectedFloor.HasValue || r.floor == selectedFloor.Value))
            .ToList();
    }

    private async Task BookRoom(Room room)
    {
        roomModel = room;
        show = true;
        StateHasChanged();
    }

    public async Task OnSave()
    {
        NavigationManager.NavigateTo($"new-booking/{roomModel.Id}");
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }

    public void Show()
    {
        show = true;
    }
}
