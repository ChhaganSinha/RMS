@page "/room-status"

@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Dto
@using RMS.Dto.Enum
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Room/Hall Booking
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Room/Hall Status</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <div class="card text">
                <div class="card-body">

                    <div class="row mb-3">
                        <div class="col-md-3">
                            <select class="form-control" @bind="selectedRoomStatus">
                                <option value="">All Statuses</option>
                                @foreach (var status in roomStatuses)
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-control" @bind="selectedRoomType">
                                <option value="">All Types</option>
                                @foreach (var type in roomTypes)
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-control" @bind="selectedFloor">
                                <option value="">All Floors</option>
                                @foreach (var floor in floors)
                                {
                                    <option value="@floor">@floor</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-primary" @onclick="ApplyFilters">Search</button>
                        </div>
                    </div>

                    <div class="row">
                        @if (filteredRooms.Count > 0)
                        {
                            @foreach (var room in filteredRooms)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card" style="background-image: url('data:image;base64,@Convert.ToBase64String(room.ImageFile)'); background-size: cover; background-position: center;">
                                        <div class="card-body d-flex flex-column justify-content-center align-items-center text-center text-white" style="background-color: rgba(0, 0, 0, 0.5);">
                                            <div class="card-body">
                                                <h5 class="card-title">@room.RoomNumber</h5>
                                                <p class="card-text">@room.Category</p>
                                                <button class="btn btn-primary mt-2" @onclick="() => BookRoom(room)">Book</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-primary"> No Room Data Available!</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {
        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
            </div>
            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</SimpleDailog>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    BookingList model = new();
    public string Title = "Room/Hall Booking";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;

    List<Room> Rooms = new();
    List<Room> filteredRooms = new();
    List<RoomHallStatus> roomStatuses = Enum.GetValues(typeof(RoomHallStatus)).Cast<RoomHallStatus>().ToList();
    List<string> roomTypes = new() { "Single", "Double", "Suite" };
    List<Floor> floors = Enum.GetValues(typeof(Floor)).Cast<Floor>().ToList();
    RoomHallStatus? selectedRoomStatus = null;
    string selectedRoomType = string.Empty;
    Floor? selectedFloor = null;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        Rooms = (await client.GetAllRoom()).ToList();
        filteredRooms = Rooms;
    }

    private void ApplyFilters()
    {
        filteredRooms = Rooms
            .Where(r => (!selectedRoomStatus.HasValue || r.Status == selectedRoomStatus.Value) &&
                        (string.IsNullOrEmpty(selectedRoomType) || r.Category == selectedRoomType) &&
                        (!selectedFloor.HasValue || r.floor == selectedFloor.Value))
            .ToList();
    }

    private async Task BookRoom(Room room)
    {
        model = new BookingList
            {
                RoomNumber = room.RoomNumber,
                RoomType = room.Category
            };
        show = true;
        StateHasChanged();
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }
    public void Show()
    {
        show = true;
    }
}
