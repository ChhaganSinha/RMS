@page "/room-status"

@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@using RMS.Dto
@using RMS.Dto.Enum
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject PermissionService PermissionService
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Room/Hall Booking
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Room/Hall Status</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (canView || canEdit || hasFullAccess)
{
    <div class="row">
        <div class="col-sm-12 p-0">
            <div class="card-body p-2 mt-n3">
                <div class="card text">
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <label for="statusDropdown" class="font-weight-bold">Status:</label>
                                <select id="statusDropdown" class="form-control" @bind="selectedRoomStatus">
                                    <option value="">All Statuses</option>
                                    @foreach (var status in roomStatuses)
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="typeDropdown" class="font-weight-bold">Room Type:</label>
                                <select id="typeDropdown" class="form-control" @bind="selectedRoomType">
                                    <option value="">All Types</option>
                                    @foreach (var type in roomTypes)
                                    {
                                        <option value="@type.Name">@type.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button class="btn btn-primary" @onclick="ApplyFilters">Search</button>
                            </div>
                        </div>

                        <div class="row">
                            @if (loading)
                            {
                                <div class="col-sm-12 text-center" style="margin-top:40vh">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                @if (filteredRooms.Count > 0)
                                {
                                    @foreach (var room in filteredRooms)
                                    {
                                        <div class="col-sm-6 col-md-3 mb-3">
                                            <div class="card shadow" style="max-width: 12rem; font-size: 0.875rem; font-family: monospace;">
                                                <div class="card-header p-0">
                                                    <img src="data:image;base64,@Convert.ToBase64String(room.ImageFile)" class="img-fluid" style="height: 100px; object-fit: cover;" alt="Room Image">
                                                </div>
                                                <div class="card-body bg-light" style="padding: 0.5rem; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);">
                                                    <h5 class="card-title font-weight-bold mb-2 text-center">Room No: @room.RoomNumber</h5>
                                                    <p style="font-size: 12px;" class="card-text mb-0 text-center">Room Type: @room.Category</p>
                                                    <p style="font-size: 12px;" class="card-text mb-0 text-center">Check Out: None</p>
                                                    <p style="font-size: 12px;" class="card-text text-success mb-0 text-center">Charge: @room.Price</p>
                                                    <div class="text-center mt-2">
                                                        @if (room.Status == RoomHallStatus.Booked)
                                                        {
                                                            <button type="button" class="btn btn-danger btn-sm" disabled>Booked</button>
                                                        }
                                                        else if (room.Status == RoomHallStatus.Available)
                                                        {
                                                            <button type="button" class="btn btn-success btn-sm" @onclick="() => BookRoom(room)">Available</button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-warning btn-sm" disabled>Under Maintenance</button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-primary">No Room Data Available!</p>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
        @if (show)
        {
            <EditForm Model="roomModel" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-6 bold-font"><i class="fa fa-check-square"></i> Booking Status</label>
                        <div class="col-md-6">
                            <div class="form-control">@roomModel.Status.ToString()</div>
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-6 bold-font"><i class="fa fa-sort-numeric-asc"></i> Room Number</label>
                        <div class="col-md-6">
                            <div class="form-control">@roomModel.RoomNumber.ToString()</div>
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-6 bold-font"><i class="fa fa-th-list"></i> Room Type</label>
                        <div class="col-md-6">
                            <div class="form-control">@roomModel.Category.ToString()</div>
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-6 bold-font"><i class="fa fa-usd"></i> Rent/Day</label>
                        <div class="col-md-6">
                            <div class="form-control">@roomModel.Price.ToString()</div>
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-6 bold-font"><i class="fa fa-user"></i> Extra Capacity</label>
                        <div class="col-md-6">
                            <div class="form-control">@(roomModel.ExtraCapacity ? "Yes" : "No")</div>
                        </div>
                    </div>
                </div>
                @if (process)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                <UiAlert Model="alert"></UiAlert>
                <hr />
                <button type="submit" class="btn btn-primary float-right col-md-5">Book Now</button>
            </EditForm>
            <br />
        }
    </SimpleDailog>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    ReservationDetailsDto model = new();
    public string Title = "Room Booking";
    bool show = false;
    bool process = false;
    bool loading = true;
    private Timer _timer;
    private int _delay = 2500;

    List<Room> Rooms = new();
    List<Room> filteredRooms = new();
    List<RoomHallStatus> roomStatuses = Enum.GetValues(typeof(RoomHallStatus)).Cast<RoomHallStatus>().ToList();
    List<RoomCategories> roomTypes = new();
    List<Floor> floors = Enum.GetValues(typeof(Floor)).Cast<Floor>().ToList();
    RoomHallStatus? selectedRoomStatus = null;
    string selectedRoomType = string.Empty;
    Floor? selectedFloor = null;
    Room roomModel = new();
    private bool canView = false;
    private bool canEdit = false;
    private bool hasFullAccess = false;

    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        var permissions = await PermissionService.HasPermission("RoomStatus");
        if (permissions != null)
        {
            canView = permissions.CanView;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }
        if (!canView)
        {
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }
        Rooms = (await client.GetAllRoom()).ToList();
        roomTypes = (await client.GetAllRoomCategory()).ToList();
        filteredRooms = Rooms;
        loading = false;
    }

    private void ApplyFilters()
    {
        filteredRooms = Rooms
            .Where(r => (!selectedRoomStatus.HasValue || r.Status == selectedRoomStatus.Value) &&
                        (string.IsNullOrEmpty(selectedRoomType) || r.Category == selectedRoomType))
            // (!selectedFloor.HasValue || r.floor == selectedFloor.Value))
            .ToList();
    }

    private async Task BookRoom(Room room)
    {
        roomModel = room;
        show = true;
        StateHasChanged();
    }

    public async Task OnSave()
    {
        alert?.Clear();
        NavigationManager.NavigateTo($"/new-booking/r/{roomModel.RoomNumber}");
    }

    public void ResetForm()
    {
        show = false;
        roomModel = new Room();
        alert?.Clear();
    }
}
