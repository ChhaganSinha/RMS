@page "/assign-room-cleaning"
@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations
@using RMS.Dto.Enum
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Assign Room Cleaning
                        @* <a @onclick="()=>show=true" style="cursor:pointer"><i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Assign Room Cleaning"></i></a> *@
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Assign Cleaning</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@* <div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <div class="card text">
                <div class="card-body">
                    <AssignRoomCleaningGrid />
                </div>
            </div>
        </div>
    </div>
</div>
 *@

@* <PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">

    @if (show)
    { *@
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="form-group col-md-4">
            <label for="houseKeeper">House Keeper</label>
            <HxSelect TItem="Employee"
                      TValue="int?"
                      Data="HouseKeepers"
                      @bind-Value="empid"
                      TextSelector="@(HouseKeepers => HouseKeepers.Name)"
                      ValueSelector="@(HouseKeepers => HouseKeepers.Id)"
                      Nullable="true"
                      NullText="- Select -"
                      NullDataText="Loading Employees..." />

            <ValidationMessage For="() => model.HouseKeeper" />
        </div>



        <div class="form-group col-md-4">
            <label for="roomType">Room Type</label>
            <select @bind="model.RoomType" class="form-control" id="roomType">
                <option value="">Select Room Type</option>
                @foreach (var type in RoomTypes)
                {
                    <option value="@type.Name">@type.Name</option>
                }
            </select>
        </div>

        <div class="form-group col-md-4">
            <label for="status">Status</label>
            <select @bind="model.Status" class="form-control" id="status">
                <option value="">Select Status</option>
                @foreach (var status in StatusList)
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
        <div class="form-group col-md-4">
            <button type="button" class="btn btn-secondary" @onclick="FilterRooms">Search</button>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="text-danger">@ErrorMessage</div>
            }
        </div>

        
    </div>

    <div class="row">
        @foreach (var room in FilteredRooms)
        {
            <div class="col-md-3 mb-2">
                <div class="card">
                    <div class="card-body">
                        <input type="checkbox" @bind="room.IsSelected" class="form-check-input" id="@room.RoomNo" />
                        <label class="form-check-label" for="@room.RoomNo">@room.RoomNo</label>
                        <div>@room.Status</div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (FilteredRooms.Any())
    {
        <button type="submit" class="btn btn-primary">Update</button>
    }
</EditForm>




@code {
    private RoomCleaningAssignmentModel model = new RoomCleaningAssignmentModel();

    private IEnumerable<Employee> HouseKeepers = new List<Employee>();
    private IEnumerable<RoomCategories> RoomTypes = new List<RoomCategories>();
    private IEnumerable<Room> Rooms = new List<Room>();
    private List<RoomModel> roomModels = new List<RoomModel>();
    private IEnumerable<RoomModel> FilteredRooms = new List<RoomModel>();


    private string ErrorMessage = string.Empty;

    [CascadingParameter]
    protected AlertModel? alert { get; set; }
    public int? empid;
    private static readonly List<string> StatusList = Enum.GetNames(typeof(RoomHallStatus)).ToList();
    public string Title = "Add Assign Room Cleaning";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;
    protected override async Task OnInitializedAsync()
    {
        HouseKeepers = await client.GetAllEmployee();
        RoomTypes = await client.GetAllRoomCategory();
        Rooms = await client.GetAllRoom();
        // roomModels = Rooms.Select(r => new RoomModel { RoomNo = r.RoomNumber, Status = r.Status.ToString(), IsSelected = false }).ToList();
        //FilteredRooms = roomModels;


        // roomModels = Rooms
        //     .Select(r => new RoomModel
        //         {
        //             RoomNo = r.RoomNumber,
        //             Status = r.Status.ToString(),
        //             IsSelected = false,
        //             DateTime = r.CreatedOn
        //         })
        //     .OrderByDescending(r => r.DateTime) // Order by the latest status change
        //     .ToList();

        // StateHasChanged();
    }

    private void FilterRooms()
    {
        FilteredRooms = Rooms
            .Where(room =>
                (string.IsNullOrEmpty(model.RoomType) || room.Category == model.RoomType) &&
                (string.IsNullOrEmpty(model.Status) || room.Status.ToString() == model.Status)
            )
            .Select(room => new RoomModel
                {
                    RoomId = room.Id,
                    RoomNo = room.RoomNumber,
                    Status = room.Status.ToString(),
                    StartDate = DateTime.Now,
                    IsSelected = false
                })
            .ToList();

        if (!FilteredRooms.Any())
        {
            ErrorMessage = "No rooms found matching the criteria.";
        }
        else
        {
            ErrorMessage = string.Empty;
        }
    }


    private async void OnValidSubmit()
    {

        try
        {
            process = true;
            alert?.Clear();


            var emp = HouseKeepers.FirstOrDefault(o => o.Id == empid);
            if (emp != null)
            {
                model.HouseKeeper = emp.Name;
                model.HouseKeeperId = emp.Id;
            }
            model.SelectedRooms = FilteredRooms.Where(room => room.IsSelected).ToList();


            // var selectedStatus = model.Status;
            // model.SelectedRooms = roomModels
            //     .Where(room => room.IsSelected)
            //     .Select(room =>
            //     {
            //         room.Status = selectedStatus;
            //         return room;
            //     })
            //     .ToList();

            var result = await client.UpsertRoomCleaningAssignment(model);

            if (result.IsSuccess)
            {
                // model = response.Result;
                await AssignRoomCleaningGrid.RefreshGridAsync();
                alert?.SetSuccess(result.Message);
                model = new();
            }
            else
                alert?.SetError(result.Message);

            process = false;
            StateHasChanged();
            _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);

            await JSRuntime.InvokeVoidAsync("alert", "Room cleaning assignment updated successfully.");
        }
        catch (Exception ex)
        {
            // Handle exceptions
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating room cleaning assignment: {ex.Message}");
        }

    }
    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }
    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }
}
