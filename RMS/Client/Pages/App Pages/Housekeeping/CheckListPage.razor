@page "/checklist-page"

@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PermissionService PermissionService
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Check List
                        @if (canEdit)
                        {
                            <a @onclick="()=>show=true" style="cursor:pointer">
                                <i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Task"></i>
                            </a>
                        }
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Check</a></li>
                    <li class="breadcrumb-item"><a>List</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (canView)
{
    <div class="row">
        <div class="col-sm-12 p-0">
            <div class="card-body p-2 mt-n3">
                <div class="card text">
                    <div class="card-body">
                        <CheckListGrid />
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>You do not have permission to view this page.</p>
}

<SimpleDailog Title="@Title" Show="@show" OnCloseDialog="ResetForm">
    @if (show)
    {
        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <div>
                <input type="text" placeholder="Enter Type Name" @bind-value="model.Name" class="form-control mb-2" />
                <ValidationMessage For="() => model.Name" />
            </div>
            <div>
                <select @bind="model.Type" class="form-control mb-2">
                    <option value="">- Select Type -</option> <!-- Default option -->
                    <option value="House Keeper">House Keeper</option> <!-- Hardcoded option for House Keeper -->
                    <option value="Laundry">Laundry</option> <!-- Hardcoded option for Laundry -->
                </select>
                <ValidationMessage For="() => model.Type" />
            </div>

            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr />
            @if (canEdit)
            {
                <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
            }
            else
            {
                <p>You do not have permission to perform this action.</p>
            }
        </EditForm>
        <br />
    }
</SimpleDailog>

@code {
    private bool canView = false;
    private bool canEdit = false;
    private bool hasFullAccess = false;

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    CheckList model = new();
    public string Title = "Add CheckList";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check permissions
        var permissions = await PermissionService.HasPermission("CheckList");

        if (permissions != null)
        {
            canView = permissions.CanView;
            canEdit = permissions.CanEdit;
            hasFullAccess = permissions.HasFullAccess;
        }

        alert?.Clear();
    }

    public async Task OnSave()
    {
        if (!canEdit)
        {
            alert?.SetError("You do not have permission to perform this action.");
            return;
        }

        process = true;
        alert?.Clear();

        var response = await client.UpsertCheckListAsync(model);
        if (response.IsSuccess)
        {
            await CheckListGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new();
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }
}
