@page "/Products"

@using RMS.Client.Client
@using RMS.Client.Pages.GridComponent
@using RMS.Client.Shared.Popup
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Havit.Blazor.Components.Web
@using Havit.Blazor.Components.Web.Bootstrap
@using System.ComponentModel.DataAnnotations;
@attribute [Authorize]

<div class="page-header breadcumb-sticky">
    <div class="page-block">
        <div class="row align-items-center">
            <div class="col-md-12">
                <div class="page-header-title">
                    <h5 class="m-b-10">
                        Product List
                        <a @onclick="()=>show=true" style="cursor:pointer"><i class="fa fa-plus-circle fa-lg text-primary" aria-hidden="true" title="Add Product"></i></a>
                    </h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/"><i class="feather icon-home"></i></a>
                    </li>
                    <li class="breadcrumb-item"><a>Product List</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 p-0">
        <div class="card-body p-2 mt-n3">
            <ProductListGrid />
        </div>
    </div>
</div>

<PageDialog Title="@Title" Show="@show" ClosePageDialog="ResetForm">
    @if (show)
    {


        <EditForm Model="model" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />

            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Product Name</label>
                    <InputText @bind-Value="@model.ProductName" id="name" class="form-control"></InputText>
                    <ValidationMessage For="() => model.ProductName" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Laundry Item</label>
                    <select @bind="model.Laundry" class="form-control" id="laundry">
                        <option value="No">No</option>
                        <option value="Yes">Yes</option>
                    </select>
                    <ValidationMessage For="() => model.Laundry" />
                </div>


            </div>
            <div class="form-group row">
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Select Product Category</label>
                    <HxSelect TItem="ProductCategories"
                              TValue="int?"
                              Data="ProductCategories"
                              @bind-Value="prodcategoriesId"
                              TextSelector="@(ProductCategories => ProductCategories.Name)"
                              ValueSelector="@(ProductCategories => ProductCategories.Id)"
                              Nullable="true"
                              NullText="-select-"
                              NullDataText="Loading ProductCategories..." />
                    <ValidationMessage For="() => model.ProductCategory" />
                </div>
                <div class="col-md-6">
                    <label class="col-form-label bold-font required-field">Select UnitName</label>
                    <HxSelect TItem="UnitNames"
                              TValue="int?"
                              Data="UnitNames"
                              @bind-Value="unitnames"
                              TextSelector="@(UnitNames => UnitNames.Name)"
                              ValueSelector="@(UnitNames => UnitNames.Id)"
                              Nullable="true"
                              NullText="-select-"
                              NullDataText="Loading UnitNames..." />
                    <ValidationMessage For="() => model.UnitNames" />
                </div>

            </div>
            <div class="form-group row">
                <div class="col-md-4">
                    <label class="col-form-label bold-font required-field">Available</label>
                    <InputNumber @bind-Value="@model.Available" id="available" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Available" />
                </div>
                <div class="col-md-4">
                    <label class="col-form-label bold-font required-field">Used</label>
                    <InputNumber @bind-Value="@model.Used" id="used" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Used" />
                </div>
                <div class="col-md-4">
                    <label class="col-form-label bold-font required-field">Destroyed</label>
                    <InputNumber @bind-Value="@model.Destroyed" id="destroyed" class="form-control"></InputNumber>
                    <ValidationMessage For="() => model.Destroyed" />
                </div>
            </div>

            @if (process)
            {
                <div style="text-align:center">
                    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                </div>
            }
            <UiAlert Model="alert"></UiAlert>
            <hr style="margin-bottom: 2px;" />
            <button type="submit" class="btn btn-primary float-right col-md-4">Add</button>
        </EditForm>
        <br />
    }
</PageDialog>

@code {
    [Parameter]
    public int Id { get; set; }
    private int? prodcategoriesId;
    private int? unitnames;
    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    ProductList model = new();
    public string Title = "Add Product";
    bool show = false;
    bool process = false;
    private Timer _timer;
    private int _delay = 2500;

    private List<ProductCategories> ProductCategories = new();
    private List<UnitNames> UnitNames = new();


    protected override async Task OnInitializedAsync()
    {
        alert?.Clear();
        ProductCategories = (await client.GetAllProductCategory()).ToList();
        UnitNames = (await client.GetAllUnitNames()).ToList();
    }

    public async Task OnSave()
    {
        process = true;
        alert?.Clear();
        model.ProductCategoryId = prodcategoriesId;
        if (prodcategoriesId != null)
            model.ProductCategory = ProductCategories.Where(x => x.Id == prodcategoriesId).Select(x => x.Name).First();
         model.UnitNamesId = unitnames;
        if (unitnames != null)
            model.UnitNames = UnitNames.Where(x => x.Id == unitnames).Select(x => x.Name).First();
        var response = await client.UpsertProductListAsync(model);
        if (response.IsSuccess)
        {

            // model = response.Result;
            await ProductListGrid.RefreshGridAsync();
            alert?.SetSuccess(response.Message);
            model = new();
        }
        else
            alert?.SetError(response.Message);

        process = false;
        StateHasChanged();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }

    private void ResetForm()
    {
        model = new();
        show = false;
        process = false;
    }

    public void OnClose()
    {
        model = new();
    }
}
